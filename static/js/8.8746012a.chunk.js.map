{"version":3,"sources":["utils/router.utils.ts","models/dice.model.ts","models/rooms.model.ts","routes/RoomList/RoomListPage/RoomListPage.enhancer.tsx","components/FormComponents.tsx","modules/RoomCreate/components/RoomCreateForm.tsx","modules/RoomCreate/RoomCreate.tsx","modules/RoomList/components/RoomListElements.tsx","modules/RoomList/RoomList.tsx","routes/RoomList/RoomListPage/RoomListPage.tsx","routes/RoomList/RoomListPage/index.ts"],"names":["locationHelper","locationHelperBuilder","history","createBrowserHistory","UserIsAuthenticated","connectedRouterRedirect","redirectPath","RouterPath","HOME_PATH","AuthenticatingComponent","Loader","wrapperDisplayName","authenticatedSelector","firebaseSelectors","authenticatingSelector","redirectAction","newLoc","dispatch","push","type","payload","message","allowRedirectBack","state","firebase","auth","isEmpty","isInitializing","isLoaded","ownProps","getRedirectQueryParam","ROOMS_PATH","Dice","Log","createRoomFormModel","roomName","name","label","fullWidth","diceType","options","D4","value","D6","D8","D10","D12","D20","D100","description","multiline","enhancedRoomList","compose","setDisplayName","withRouter","useStyles","makeStyles","theme","formField","marginBottom","FormFieldHelperText","touched","error","FormHelperText","FormFieldText","props","classes","Field","component","input","meta","invalid","custom","TextField","variant","placeholder","helperText","className","FormFieldCheckboxGroup","onChange","inputValue","checkboxesFormControls","map","index","checked","includes","FormControlLabel","key","control","Checkbox","event","arr","target","splice","indexOf","FormControl","FormLabel","FormGroup","row","RoomCreateForm","reduxForm","form","validate","values","errors","forEach","field","length","handleSubmit","pristine","submitting","handleClose","onSubmit","DialogContent","dividers","DialogActions","Button","color","disabled","onClick","RoomCreate","withStyles","createStyles","locationPath","useSelector","locationSelectors","match","path","React","useState","open","setOpen","useTheme","fullScreen","useMediaQuery","breakpoints","down","useHistory","firestore","useFirestore","userProfile","useEffect","ROOM_CREATE_PATH","Dialog","onClose","aria-labelledby","DialogTitle","formValues","newRoom","createdAt","Date","now","toString","gameMaster","uid","avatarUrl","displayName","email","photoURL","logs","players","collection","FirestoreCollection","ROOMS","add","then","room","ROOM_PATH","id","createNewRoom","e","console","log","RoomListElements","root","width","backgroundColor","palette","background","paper","height","overflowY","item","cursor","divider","roomsAsGameMaster","roomsAsPlayer","onRoomClick","selectedRoom","renderElement","rooms","timeout","Object","keys","roomId","Grow","in","ListItem","selected","button","dense","alignItems","ListItemAvatar","Avatar","firstLettersJoined","ListItemText","primary","secondary","timeStampToFormattedDate","List","Divider","RoomList","margin","overflow","searchBar","borderBottom","searchInput","fontSize","typography","block","display","contentWrapper","showSearchBar","Paper","AppBar","position","elevation","Toolbar","Grid","container","spacing","xs","InputProps","disableUnderline","cards","maxWidth","media","useDispatch","storeLocationMatch","userRoomsAsGameMaster","firestoreSelectors","userRoomsAsPlayer","JSON","stringify","locationActions","matchChange","Fragment","Card","CardMedia","image","process","title","CardContent","Typography","gutterBottom","CardActions","to"],"mappings":"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","file":"static/js/8.8746012a.chunk.js","sourcesContent":["import locationHelperBuilder from 'redux-auth-wrapper/history4/locationHelper';\nimport { connectedRouterRedirect } from 'redux-auth-wrapper/history4/redirect';\nimport { createBrowserHistory } from 'history';\nimport { RouterPath } from '../models/paths';\n\nimport { AppState } from '../store/main';\nimport { firebaseSelectors } from '../store/firebase/firebase.selectors';\nimport { Loader } from '../components/Loader';\n\nconst locationHelper = locationHelperBuilder({});\nconst history = createBrowserHistory();\n\nconst AUTHED_REDIRECT = 'AUTHED_REDIRECT';\nconst UNAUTHED_REDIRECT = 'UNAUTHED_REDIRECT';\n\n/**\n * Higher Order Component that redirects to `/login` instead\n * rendering if user is not authenticated (default of redux-auth-wrapper).\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\nexport const UserIsAuthenticated = connectedRouterRedirect({\n  redirectPath: RouterPath.HOME_PATH,\n  AuthenticatingComponent: Loader,\n  wrapperDisplayName: 'UserIsAuthenticated',\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: firebaseSelectors.authenticatedSelector,\n  authenticatingSelector: firebaseSelectors.authenticatingSelector,\n  redirectAction: ((newLoc: any) => (dispatch: any) => {\n    // Use push, replace, and go to navigate around.\n    history.push(newLoc);\n    dispatch({\n      type: UNAUTHED_REDIRECT,\n      payload: { message: 'User is not authenticated.' },\n    });\n  }) as any,\n});\n\n/**\n * Higher Order Component that redirects to listings page or most\n * recent route instead rendering if user is not authenticated. This is useful\n * routes that should not be displayed if a user is logged in, such as the\n * login route.\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\nexport const UserIsNotAuthenticated = connectedRouterRedirect({\n  AuthenticatingComponent: Loader,\n  wrapperDisplayName: 'UserIsNotAuthenticated',\n  allowRedirectBack: false,\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: (state: AppState) => {\n    const {\n      firebase: { auth },\n    } = state;\n    return auth.isEmpty;\n  },\n  authenticatingSelector: ({ firebase: { auth, isInitializing } }) => !auth.isLoaded || isInitializing,\n  redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || RouterPath.ROOMS_PATH,\n  redirectAction: ((newLoc: any) => (dispatch: any) => {\n    // Use push, replace, and go to navigate around.\n    history.push(newLoc);\n    dispatch({\n      type: AUTHED_REDIRECT,\n      payload: { message: 'User is not authenticated.' },\n    });\n  }) as any,\n});\n\n/*\n/!**\n * Render children based on route config objects\n * @param {Array} routes - Routes settings array\n * @param {Object} match - Routes settings array\n * @param {Object} parentProps - Props to pass to children from parent\n *!/\nexport function renderChildren(routes, match, parentProps) {\n  return routes.map(route => (\n    <Route\n      key={`${match.url}-${route.path}`}\n      path={`${match.url}/${route.path}`}\n      render={props => <route.component {...parentProps} {...props} />}\n    />\n  ));\n}*/\n","export interface IDiceBeforeThrow {\n  vectors: any;\n  notation: any;\n  throwRequestResult: number[];\n  emitResult: boolean;\n}\n\nexport interface IDiceThrowResult {\n  diceSet: string;\n  throwRequestResult: number[];\n  emit: boolean;\n}\n\nexport enum Dice {\n  D4 = 'd4',\n  D6 = 'd6',\n  D8 = 'd8',\n  D10 = 'd10',\n  D12 = 'd12',\n  D20 = 'd20',\n  D100 = 'd100',\n}\n\ninterface IDiceVector {\n  set: Dice;\n  pos: {\n    x: number;\n    y: number;\n    z: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n    z: number;\n  };\n  angle: {\n    x: number;\n    y: number;\n    z: number;\n  };\n  axis: {\n    x: number;\n    y: number;\n    z: number;\n    a: number;\n  };\n}\n\nexport interface IDiceThrow {\n  diceSet: string;\n  throwRequestResult: number[];\n}\n","import { Dice, IDiceThrowResult } from './dice.model';\n\nexport enum Log {\n  DICE_ROLL = 'DICE_ROLL',\n}\n\nexport interface IProfile {\n  uid: string;\n  avatarUrl: string;\n  displayName: string;\n  email: string;\n  photoURL: string;\n  connected?: boolean;\n}\n\nexport interface IRoomLog {\n  timestamp: string;\n  type: Log;\n  authorUid: string;\n  payload: Omit<IDiceThrowResult, 'emit'>;\n}\n\nexport interface IRoom extends IRoomCreateForm {\n  createdAt: string;\n  gameMaster: IProfile;\n  players: string[];\n  logs: IRoomLog[];\n  chatUid?: string;\n}\n\nexport interface IRoomCreateForm {\n  roomName: string;\n  diceType: Dice[];\n  description: string;\n}\n\nexport const createRoomFormModel = {\n  roomName: { name: 'roomName', label: 'Name of the Room', fullWidth: true },\n  diceType: {\n    name: 'diceType',\n    label: 'Allowed dice',\n    options: [\n      { label: Dice.D4, value: Dice.D4 },\n      { label: Dice.D6, value: Dice.D6 },\n      { label: Dice.D8, value: Dice.D8 },\n      { label: Dice.D10, value: Dice.D10 },\n      { label: Dice.D12, value: Dice.D12 },\n      { label: Dice.D20, value: Dice.D20 },\n      { label: Dice.D100, value: Dice.D100 },\n    ],\n  },\n  description: { name: 'description', label: 'Room description', multiline: true, fullWidth: true },\n};\n\nexport const diceSetFormModel = {\n  diceD4: { name: Dice.D4, label: Dice.D4, defaultValue: 1 },\n  diceD6: { name: Dice.D6, label: Dice.D6, defaultValue: 1 },\n  diceD8: { name: Dice.D8, label: Dice.D8, defaultValue: 1 },\n  diceD10: { name: Dice.D10, label: Dice.D10, defaultValue: 1 },\n  diceD12: { name: Dice.D12, label: Dice.D12, defaultValue: 1 },\n  diceD20: { name: Dice.D20, label: Dice.D20, defaultValue: 1 },\n  diceD100: { name: Dice.D100, label: Dice.D100, defaultValue: 1 },\n};\n","import { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { setDisplayName } from 'recompose';\nimport { UserIsAuthenticated } from '../../../utils/router.utils';\n\nexport const enhancedRoomList = compose(\n  // Set component display name (more clear in dev/error tools)\n  setDisplayName('EnhancedRoomList'),\n  // Add props.match\n  withRouter,\n  // Redirect to /login if user is not logged in\n  UserIsAuthenticated\n);\n","import React from 'react';\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormHelperText,\n  FormLabel,\n  InputLabel,\n  Select,\n  Slider,\n  TextField,\n} from '@material-ui/core';\nimport { Field } from 'redux-form';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\n\n/*\n * Model\n */\ninterface FormFieldGenericProps<T = any> {\n  name: string;\n  label: string;\n  value?: T;\n  [key: string]: any;\n}\nexport interface IGroupOption {\n  label: string;\n  value: string | number;\n}\n\ninterface FormFieldWithOptionsProps extends FormFieldGenericProps {\n  options: IGroupOption[];\n}\n\n/*\n * Styles\n */\n\nconst styles = (theme: Theme) => ({\n  formField: { marginBottom: '16px' },\n});\n\nconst useStyles = makeStyles(styles);\n\n/*\n * Components\n */\n\nexport const FormFieldHelperText = ({ touched, error }: any) => {\n  if (!(touched && error)) {\n    return;\n  } else {\n    return <FormHelperText>{touched && error}</FormHelperText>;\n  }\n};\n\nexport const FormFieldText = (props: FormFieldGenericProps) => {\n  const classes = useStyles();\n\n  const formField = ({ label, input, meta: { touched, invalid, error }, ...custom }: any) => (\n    <TextField\n      variant=\"outlined\"\n      label={label}\n      placeholder={label}\n      error={touched && invalid}\n      helperText={touched && error}\n      {...input}\n      {...custom}\n    />\n  );\n\n  return <Field {...props} component={formField} className={classes.formField} />;\n};\n\nexport const FormFieldSelect = (props: FormFieldGenericProps) => {\n  const classes = useStyles();\n\n  const field = ({ input, label, meta: { touched, error }, children, ...custom }: FormFieldGenericProps) => {\n    return (\n      <FormControl error={touched && error}>\n        <InputLabel htmlFor=\"age-native-simple\">Age</InputLabel>\n        <Select\n          variant=\"outlined\"\n          native\n          {...input}\n          {...custom}\n          inputProps={{\n            name: 'age',\n            id: 'age-native-simple',\n          }}\n        >\n          {children}\n        </Select>\n        {FormFieldHelperText({ touched, error })}\n      </FormControl>\n    );\n  };\n\n  return <Field {...props} type=\"checkbox\" component={field} className={classes.formField} />;\n};\n\nexport const FormFieldCheckbox = (props: FormFieldGenericProps) => {\n  const classes = useStyles();\n\n  const field = ({ input, label }: FormFieldGenericProps) => {\n    return <FormControlLabel control={<Checkbox checked={!!input.value} onChange={input.onChange} />} label={label} />;\n  };\n\n  return <Field {...props} type=\"checkbox\" component={field} className={classes.formField} />;\n};\n\nexport const FormFieldCheckboxGroup = (props: FormFieldWithOptionsProps) => {\n  const classes = useStyles();\n\n  const field = ({ input, meta, options, label }: FormFieldWithOptionsProps) => {\n    const { name, onChange } = input;\n    const { touched, error } = meta;\n    const inputValue = input.value;\n\n    const checkboxesFormControls = options.map(({ label, value }: any, index: number) => {\n      const handleChange = (event: any) => {\n        const arr = [...inputValue];\n        if (event.target.checked) {\n          arr.push(value);\n        } else {\n          arr.splice(arr.indexOf(value), 1);\n        }\n        return onChange(arr);\n      };\n      const checked = inputValue.includes(value);\n      return (\n        <FormControlLabel\n          key={index}\n          control={<Checkbox checked={checked} onChange={handleChange} name={`${name}[${index}]`} value={value} />}\n          label={label}\n        />\n      );\n    });\n\n    return (\n      <FormControl error={touched && !!error} component=\"fieldset\">\n        <FormLabel component=\"legend\">{label}</FormLabel>\n        <FormGroup row>{checkboxesFormControls}</FormGroup>\n        {FormFieldHelperText({ touched, error })}\n      </FormControl>\n    );\n  };\n\n  return <Field {...props} type=\"checkbox\" component={field} className={classes.formField} />;\n};\n\nexport const FormFieldDiceSpinner = (props: FormFieldGenericProps) => {\n  const classes = useStyles();\n\n  function valuetext(value: number) {\n    return `${value}`;\n  }\n\n  const formField = ({ label, input, meta: { touched, invalid, error }, ...custom }: any) => (\n    <React.Fragment>\n      <FormControlLabel\n        control={\n          <Slider\n            defaultValue={1}\n            getAriaValueText={valuetext}\n            aria-labelledby=\"number-of-dices\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks\n            min={0}\n            max={16}\n          />\n        }\n        label={label}\n      />\n    </React.Fragment>\n  );\n\n  return <Field {...props} component={formField} className={classes.formField} />;\n};\n","import React from 'react';\nimport { Button, DialogActions, DialogContent } from '@material-ui/core';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\n\nimport { createRoomFormModel } from '../../../models/rooms.model';\nimport { FormFieldCheckboxGroup, FormFieldText } from '../../../components/FormComponents';\n\ninterface RoomCreateFormProps extends InjectedFormProps {\n  handleClose: () => void;\n}\n\nconst validate = (values: any) => {\n  const errors: any = {};\n\n  [createRoomFormModel.roomName.name].forEach(field => {\n    if (!values[field]) {\n      errors[field] = 'Required';\n    }\n  });\n\n  if (!(values[createRoomFormModel.diceType.name] && values[createRoomFormModel.diceType.name].length)) {\n    errors[createRoomFormModel.diceType.name] = 'Select at least one dice';\n  }\n  return errors;\n};\n\nfunction RoomCreateFormC(props: RoomCreateFormProps) {\n  const { handleSubmit, pristine, submitting, handleClose, invalid } = props;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <DialogContent dividers>\n        <div>\n          <FormFieldText {...createRoomFormModel.roomName} />\n        </div>\n\n        <div>\n          <FormFieldText {...createRoomFormModel.description} />\n        </div>\n        <div>\n          <FormFieldCheckboxGroup {...createRoomFormModel.diceType} />\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button type=\"submit\" color=\"primary\" disabled={invalid || pristine || submitting}>\n          Submit\n        </Button>\n        <Button type=\"button\" onClick={handleClose} color=\"primary\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </form>\n  );\n}\n\nexport const RoomCreateForm = reduxForm({\n  form: 'createRoom',\n  validate,\n})(RoomCreateFormC as any) as any;\n","import React, { useEffect } from 'react';\nimport { createStyles, Theme, useTheme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport { Dialog, DialogTitle, useMediaQuery } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport { locationSelectors } from '../../store/location/location.selectors';\nimport { RoomCreateForm } from './components/RoomCreateForm';\nimport { RouterPath } from '../../models/paths';\nimport { IProfile, IRoom, IRoomCreateForm } from '../../models/rooms.model';\nimport { useFirestore } from 'react-redux-firebase';\nimport { FirestoreCollection } from '../../models/firestore.model';\nimport { firebaseSelectors } from '../../store/firebase/firebase.selectors';\n\nconst styles = (theme: Theme) => createStyles({});\n\nexport interface RoomCreateProps extends WithStyles<typeof styles> {}\n\nfunction RoomCreateC(props: RoomCreateProps) {\n  const { path: locationPath } = useSelector(locationSelectors.match);\n\n  const [open, setOpen] = React.useState(false);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xs'));\n  const history = useHistory();\n  const firestore = useFirestore();\n  const userProfile: IProfile = useSelector(firebaseSelectors.userProfile);\n\n  const handleClose = () => {\n    setOpen(false);\n    history.push(RouterPath.ROOMS_PATH);\n  };\n\n  function createNewRoom(formValues: IRoomCreateForm): Promise<void> {\n    const newRoom: IRoom = {\n      createdAt: Date.now().toString(),\n      gameMaster: {\n        uid: userProfile.uid,\n        avatarUrl: userProfile.avatarUrl,\n        displayName: userProfile.displayName,\n        email: userProfile.email,\n        photoURL: userProfile.photoURL,\n      },\n      logs: [],\n      players: [],\n      ...formValues,\n    };\n    return firestore\n      .collection(FirestoreCollection.ROOMS)\n      .add(newRoom)\n      .then(room => {\n        setOpen(false);\n        history.push(`${RouterPath.ROOM_PATH}/${room.id}`);\n      });\n  }\n\n  const handleSubmit = (formValues: IRoomCreateForm) => {\n    createNewRoom(formValues).catch((e: boolean) => {\n      // TODO implement error message\n      console.log({ e });\n    });\n  };\n\n  useEffect(() => {\n    if (locationPath === RouterPath.ROOM_CREATE_PATH) {\n      setOpen(true);\n    }\n  }, [locationPath]);\n\n  return (\n    <Dialog fullScreen={fullScreen} open={open} onClose={handleClose} aria-labelledby=\"responsive-dialog-title\">\n      <DialogTitle>Create new Room</DialogTitle>\n      <RoomCreateForm handleClose={handleClose} onSubmit={handleSubmit} />\n    </Dialog>\n  );\n}\n\nexport const RoomCreate = withStyles(styles)(RoomCreateC);\n","import React from 'react';\nimport { Avatar, Divider, Grow, List, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport { Dictionary } from 'react-redux-firebase';\n\nimport { firstLettersJoined } from '../../../utils/text.utils';\nimport { timeStampToFormattedDate } from '../../../utils/date.utils';\nimport { IRoom } from '../../../models/rooms.model';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n      height: '20vh',\n      overflowY: 'scroll',\n    },\n    item: {\n      cursor: 'pointer',\n    },\n    divider: { backgroundColor: 'rgba(0, 0, 0, 0.12)' },\n  });\n\ninterface RoomListElementProps extends WithStyles<typeof styles> {\n  roomsAsGameMaster: Dictionary<IRoom>;\n  roomsAsPlayer: Dictionary<IRoom>;\n  selectedRoom: string | null;\n  onRoomClick: (roomId: string) => void;\n}\n\nfunction RoomListElementC(props: RoomListElementProps) {\n  const { classes, roomsAsGameMaster, roomsAsPlayer, onRoomClick, selectedRoom } = props;\n\n  const renderElement = (rooms: Dictionary<IRoom>, timeout: number = 300) =>\n    Object.keys(rooms).map((roomId, id) => (\n      <Grow key={roomId} in timeout={1000 * id + timeout}>\n        <ListItem\n          onClick={() => onRoomClick(roomId)}\n          selected={roomId === selectedRoom}\n          className={classes.item}\n          button\n          dense\n          alignItems=\"flex-start\"\n        >\n          <ListItemAvatar>\n            <Avatar>{firstLettersJoined(rooms[roomId].roomName || 'No name')}</Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary={rooms[roomId].roomName || 'No name'}\n            secondary={timeStampToFormattedDate(rooms[roomId].createdAt)}\n          />\n        </ListItem>\n      </Grow>\n    ));\n\n  return (\n    <List className={classes.root}>\n      {renderElement(roomsAsGameMaster)}\n      <Grow in={!!Object.keys(roomsAsGameMaster).length} timeout={1000 * Object.keys(roomsAsGameMaster).length + 300}>\n        <Divider className={classes.divider} />\n      </Grow>\n      {renderElement(roomsAsPlayer, 1000 * Object.keys(roomsAsGameMaster).length + 300)}\n    </List>\n  );\n}\n\nexport const RoomListElements = withStyles(styles)(RoomListElementC);\n","import AppBar from '@material-ui/core/AppBar';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport React from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { Grow } from '@material-ui/core';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\nimport { Dictionary } from 'react-redux-firebase';\n\nimport { RouterPath } from '../../models/paths';\nimport { IRoom } from '../../models/rooms.model';\nimport { RoomListElements } from './components/RoomListElements';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      margin: 'auto',\n      overflow: 'hidden',\n    },\n    searchBar: {\n      borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n    },\n    searchInput: {\n      fontSize: theme.typography.fontSize,\n    },\n    block: {\n      display: 'block',\n    },\n    contentWrapper: {\n      margin: '16px 16px',\n    },\n  });\n\nexport interface RoomListProps extends WithStyles<typeof styles> {\n  showSearchBar?: boolean;\n  roomsAsGameMaster: Dictionary<IRoom>;\n  roomsAsPlayer: Dictionary<IRoom>;\n  selectedRoom: string | null;\n  label: string;\n}\n\nfunction RoomListC(props: RoomListProps) {\n  const { classes, roomsAsGameMaster, roomsAsPlayer, showSearchBar, selectedRoom, label } = props;\n  const history = useHistory();\n\n  const onRoomClick = (roomId: string) => {\n    return history.push(`${RouterPath.ROOM_PATH}/${roomId}`);\n  };\n\n  return (\n    <Grow in>\n      <Paper className={classes.paper}>\n        {showSearchBar && (\n          <AppBar className={classes.searchBar} position=\"static\" color=\"default\" elevation={0}>\n            <Toolbar>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item>\n                  <SearchIcon className={classes.block} color=\"inherit\" />\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    fullWidth\n                    placeholder={label}\n                    InputProps={{\n                      disableUnderline: true,\n                      className: classes.searchInput,\n                    }}\n                  />\n                </Grid>\n              </Grid>\n            </Toolbar>\n          </AppBar>\n        )}\n        <div className={classes.contentWrapper}>\n          <RoomListElements\n            roomsAsGameMaster={roomsAsGameMaster}\n            roomsAsPlayer={roomsAsPlayer}\n            onRoomClick={onRoomClick}\n            selectedRoom={selectedRoom}\n          />\n        </div>\n      </Paper>\n    </Grow>\n  );\n}\n\nexport const RoomList = withStyles(styles)(RoomListC);\n","import React, { useEffect } from 'react';\nimport { Button, Card, CardActions, CardContent, CardMedia, Grow, Typography } from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Dictionary } from 'react-redux-firebase';\nimport { firestoreSelectors } from '../../../store/firebase/firestore.selectors';\nimport { IRoom } from '../../../models/rooms.model';\nimport { locationActions } from '../../../store/location/location.actions';\nimport { LocationMatch } from '../../../store/location/location.model';\nimport { locationSelectors } from '../../../store/location/location.selectors';\nimport { RoomCreate } from '../../../modules/RoomCreate/RoomCreate';\nimport { RoomList } from '../../../modules/RoomList/RoomList';\nimport { RouterPath } from '../../../models/paths';\n\nconst styles = (theme: Theme) => ({\n  cards: {\n    marginBottom: '16px',\n    maxWidth: 936,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nexport interface RoomListProps {\n  match: LocationMatch;\n}\n\nexport function RoomListsC(props: RoomListProps) {\n  const classes = useStyles();\n  const { match } = props;\n\n  const dispatch = useDispatch();\n  const storeLocationMatch = useSelector(locationSelectors.match);\n  const userRoomsAsGameMaster: Dictionary<IRoom> = useSelector(firestoreSelectors.userRoomsAsGameMaster) || {};\n  const userRoomsAsPlayer: Dictionary<IRoom> = useSelector(firestoreSelectors.userRoomsAsPlayer) || {};\n\n  useEffect(() => {\n    if (JSON.stringify(match) !== JSON.stringify(storeLocationMatch)) {\n      dispatch(locationActions.matchChange(match));\n    }\n  });\n\n  return (\n    <React.Fragment>\n      <section className={classes.cards}>\n        <Grow in>\n          <Card>\n            <CardMedia className={classes.media} image={`${process.env.PUBLIC_URL}/assets/images/fantasy-wallpapers.jpg`} title=\"Fantasy RPG\" />\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                Enter to the new world\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                Create a new game room to start a new adventure with your friends!\n              </Typography>\n            </CardContent>\n            <CardActions>\n              <NavLink to={RouterPath.ROOM_CREATE_PATH}>\n                <Button variant=\"contained\" color=\"primary\">\n                  Create new Room\n                </Button>\n              </NavLink>\n            </CardActions>\n          </Card>\n        </Grow>\n      </section>\n\n      <section className={classes.cards}>\n        <RoomList\n          roomsAsGameMaster={userRoomsAsGameMaster}\n          roomsAsPlayer={userRoomsAsPlayer}\n          selectedRoom={null}\n          showSearchBar\n          label={'Search room by name'}\n        />\n      </section>\n\n      <RoomCreate />\n    </React.Fragment>\n  );\n}\n","import { enhancedRoomList } from './RoomListPage.enhancer';\nimport { RoomListsC } from './RoomListPage';\n\nexport default enhancedRoomList(RoomListsC);\n"],"sourceRoot":""}