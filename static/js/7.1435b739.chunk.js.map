{"version":3,"sources":["utils/router.utils.ts","components/FormDialog.tsx","components/ImageWrapper.tsx","modules/RoomCreate/components/RoomCreateForm.tsx","modules/RoomCreate/RoomCreate.tsx","routes/RoomList/RoomListPage/RoomListPage.enhancer.tsx","../node_modules/@material-ui/core/esm/CardActions/CardActions.js","containers/RoomCreateInRoomList.tsx","modules/RoomList/components/RoomListElement.tsx","modules/RoomList/components/RoomListElements.tsx","modules/RoomList/RoomList.tsx","routes/RoomList/RoomListPage/RoomListPage.tsx","routes/RoomList/RoomListPage/index.ts"],"names":["locationHelper","locationHelperBuilder","history","createBrowserHistory","UserIsAuthenticated","connectedRouterRedirect","redirectPath","RouterPath","HOME_PATH","AuthenticatingComponent","Loader","wrapperDisplayName","authenticatedSelector","firebaseSelectors","isAuthenticated","authenticatingSelector","redirectAction","newLoc","dispatch","push","type","payload","message","allowRedirectBack","state","firebase","auth","isEmpty","isInitializing","isLoaded","ownProps","getRedirectQueryParam","ROOMS_PATH","FormDialog","props","open","onClose","children","title","theme","useTheme","fullScreen","useMediaQuery","breakpoints","down","aria-labelledby","styles","createStyles","image","width","height","backgroundPosition","backgroundSize","useStyles","makeStyles","ImageWrapper","React","memo","src","classes","in","length","className","RoomCreateForm","reduxForm","form","validate","values","errors","createRoomFormModel","roomName","name","maxPlayers","forEach","field","Object","keys","fieldKey","maxLength","diceType","handleSubmit","pristine","submitting","invalid","useSelector","mainSelectors","getFormCreateRoom","onSubmit","roomImage","DialogContent","dividers","campaignTitle","description","gameMasterAvatar","style","DialogActions","Button","color","disabled","onClick","RoomCreate","initialValues","prev","next","equal","enhancedRoomList","compose","setDisplayName","withRouter","CardActions","ref","_props$disableSpacing","disableSpacing","other","_objectWithoutProperties","_extends","clsx","root","spacing","withStyles","display","alignItems","padding","marginLeft","RoomCreateInRoomList","locationPath","locationSelectors","match","path","useState","setOpen","useHistory","firestore","useFirestore","userProfile","Toast","useContext","ToastContext","useEffect","ROOM_CREATE_PATH","formValues","newRoom","createdAt","Date","now","toString","gameMasterUid","uid","logs","playersUid","players","avatarUrl","photoURL","displayName","email","gameMaster","collection","FirestoreCollection","ROOMS","add","then","room","ROOM_PATH","id","createNewRoom","e","setSnackbarConfig","SnackbarType","ERROR","text","RoomListElement","item","cursor","roomId","onRoomClick","selectedRoom","ListItem","selected","button","dense","ListItemAvatar","Avatar","firstLettersJoined","ListItemText","primary","secondary","dateUtils","timeStampToFormattedDate","RoomListElements","backgroundColor","palette","background","paper","overflowY","divider","roomsAsGameMaster","roomsAsPlayer","renderElement","rooms","timeout","map","Grow","key","List","Divider","RoomList","margin","overflow","searchBar","borderBottom","searchInput","fontSize","typography","block","contentWrapper","showSearchBar","label","Paper","AppBar","position","elevation","Toolbar","Grid","container","xs","TextField","fullWidth","placeholder","InputProps","disableUnderline","cards","marginBottom","maxWidth","media","useDispatch","storeLocationMatch","userRoomsAsGameMaster","firestoreSelectors","userRoomsAsPlayer","JSON","stringify","locationActions","matchChange","Fragment","Card","CardMedia","process","CardContent","Typography","gutterBottom","variant","component","to"],"mappings":"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","file":"static/js/7.1435b739.chunk.js","sourcesContent":["import locationHelperBuilder from 'redux-auth-wrapper/history4/locationHelper';\nimport { connectedRouterRedirect } from 'redux-auth-wrapper/history4/redirect';\nimport { createBrowserHistory } from 'history';\nimport { RouterPath } from '../models/paths';\n\nimport { AppState } from '../store/main';\nimport { firebaseSelectors } from '../store/firebase/firebase.selectors';\nimport { Loader } from '../components/Loader';\n\nconst locationHelper = locationHelperBuilder({});\nconst history = createBrowserHistory();\n\nconst AUTHED_REDIRECT = 'AUTHED_REDIRECT';\nconst UNAUTHED_REDIRECT = 'UNAUTHED_REDIRECT';\n\n/**\n * Higher Order Component that redirects to `/login` instead\n * rendering if user is not authenticated (default of redux-auth-wrapper).\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\nexport const UserIsAuthenticated = connectedRouterRedirect({\n  redirectPath: RouterPath.HOME_PATH,\n  AuthenticatingComponent: Loader,\n  wrapperDisplayName: 'UserIsAuthenticated',\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: firebaseSelectors.isAuthenticated,\n  authenticatingSelector: firebaseSelectors.authenticatingSelector,\n  redirectAction: ((newLoc: any) => (dispatch: any) => {\n    // Use push, replace, and go to navigate around.\n    history.push(newLoc);\n    dispatch({\n      type: UNAUTHED_REDIRECT,\n      payload: { message: 'User is not authenticated.' },\n    });\n  }) as any,\n});\n\n/**\n * Higher Order Component that redirects to listings page or most\n * recent route instead rendering if user is not authenticated. This is useful\n * routes that should not be displayed if a user is logged in, such as the\n * login route.\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\nexport const UserIsNotAuthenticated = connectedRouterRedirect({\n  AuthenticatingComponent: Loader,\n  wrapperDisplayName: 'UserIsNotAuthenticated',\n  allowRedirectBack: false,\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: (state: AppState) => {\n    const {\n      firebase: { auth },\n    } = state;\n    return auth.isEmpty;\n  },\n  authenticatingSelector: ({ firebase: { auth, isInitializing } }) => !auth.isLoaded || isInitializing,\n  redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || RouterPath.ROOMS_PATH,\n  redirectAction: ((newLoc: any) => (dispatch: any) => {\n    // Use push, replace, and go to navigate around.\n    history.push(newLoc);\n    dispatch({\n      type: AUTHED_REDIRECT,\n      payload: { message: 'User is not authenticated.' },\n    });\n  }) as any,\n});\n\n/*\n/!**\n * Render children based on route config objects\n * @param {Array} routes - Routes settings array\n * @param {Object} match - Routes settings array\n * @param {Object} parentProps - Props to pass to children from parent\n *!/\nexport function renderChildren(routes, match, parentProps) {\n  return routes.map(route => (\n    <Route\n      key={`${match.url}-${route.path}`}\n      path={`${match.url}/${route.path}`}\n      render={props => <route.component {...parentProps} {...props} />}\n    />\n  ));\n}*/\n","import React from 'react';\nimport { useTheme } from '@material-ui/core/styles';\nimport { Dialog, DialogTitle, useMediaQuery } from '@material-ui/core';\n\nexport interface FormDialogProps<T> {\n  open: boolean;\n  onClose: () => void;\n  title: string;\n  children: any;\n}\n\nexport function FormDialog<T = any>(props: FormDialogProps<T>) {\n  const { open, onClose, children = [], title } = props;\n\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xs'));\n\n  return (\n    <Dialog fullScreen={fullScreen} open={open} onClose={onClose} aria-labelledby=\"responsive-dialog-title\">\n      <DialogTitle>{title}</DialogTitle>\n      {children}\n    </Dialog>\n  );\n}\n","import React from 'react';\nimport { CardMedia, Collapse, createStyles } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst styles = createStyles({\n  image: {\n    width: '100%',\n    height: '25vh',\n    backgroundPosition: 'top',\n    backgroundSize: 'cover',\n  },\n});\n\ninterface ImageWrapperProps {\n  src: string;\n  title: string;\n}\n\nconst useStyles = makeStyles(styles);\n\nfunction ImageWrapperC(props: ImageWrapperProps) {\n  const { src = '', title } = props;\n  const classes = useStyles();\n\n  return (\n    <Collapse in={src.length > 8}>{src && <CardMedia className={classes.image} image={src} title={title} />}</Collapse>\n  );\n}\nexport const ImageWrapper = React.memo(ImageWrapperC);\n","import React from 'react';\nimport { Button, DialogActions, DialogContent } from '@material-ui/core';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\nimport { useSelector } from 'react-redux';\n\nimport { createRoomFormModel } from '../../../models/rooms.model';\nimport { FormFieldCheckboxGroup, FormFieldText } from '../../../components/FormComponents';\nimport { ImageWrapper } from '../../../components/ImageWrapper';\nimport { mainSelectors } from '../../../store/main.selectors';\n\nconst validate = (values: any) => {\n  const errors: any = {};\n\n  [createRoomFormModel.roomName.name, createRoomFormModel.maxPlayers.name].forEach(field => {\n    if (!values[field]) {\n      errors[field] = 'Required';\n    }\n  });\n\n  Object.keys(createRoomFormModel).forEach(fieldKey => {\n    if (\n      createRoomFormModel[fieldKey].maxLength &&\n      values[createRoomFormModel[fieldKey].name]?.length > createRoomFormModel[fieldKey].maxLength\n    ) {\n      errors[fieldKey] = `Max length ${createRoomFormModel[fieldKey].maxLength} exceeded`;\n    }\n  });\n\n  if (!(values[createRoomFormModel.diceType.name] && values[createRoomFormModel.diceType.name].length)) {\n    errors[createRoomFormModel.diceType.name] = 'Select at least one dice';\n  }\n  return errors;\n};\n\ninterface RoomCreateFormProps extends InjectedFormProps {\n  onClose: () => void;\n}\n\nfunction RoomCreateFormC(props: RoomCreateFormProps) {\n  const { handleSubmit, pristine, submitting, onClose, invalid } = props;\n  const form = useSelector(mainSelectors.getFormCreateRoom);\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <ImageWrapper src={form?.roomImage} title=\"Room image\" />\n\n      <DialogContent dividers>\n        <FormFieldText {...createRoomFormModel.roomName} />\n        <FormFieldText {...createRoomFormModel.roomImage} />\n        <FormFieldText {...createRoomFormModel.campaignTitle} />\n        <FormFieldText {...createRoomFormModel.description} />\n        <FormFieldText {...createRoomFormModel.gameMasterAvatar} />\n        <div style={{ width: '50%' }}>\n          <FormFieldText {...createRoomFormModel.maxPlayers} />\n        </div>\n        <FormFieldCheckboxGroup {...createRoomFormModel.diceType} />\n      </DialogContent>\n      <DialogActions>\n        <Button type=\"submit\" color=\"primary\" disabled={invalid || pristine || submitting}>\n          Submit\n        </Button>\n        <Button type=\"button\" onClick={onClose} color=\"primary\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </form>\n  );\n}\n\nexport const RoomCreateForm = reduxForm({\n  form: 'createRoom',\n  validate,\n})(RoomCreateFormC as any) as any;\n","import React from 'react';\nimport { RoomCreateForm } from './components/RoomCreateForm';\n\nimport { IRoomCreateForm } from '../../models/rooms.model';\nimport { FormDialog } from '../../components/FormDialog';\nimport { equal } from '../../utils/object.utils';\n\nexport interface RoomCreateProps {\n  open: boolean;\n  onClose: () => void;\n  onSubmit: (formValues: IRoomCreateForm) => void;\n  initialValues?: IRoomCreateForm;\n}\n\nexport function RoomCreateC(props: RoomCreateProps) {\n  const { open, onClose, onSubmit, initialValues } = props;\n\n  return (\n    <FormDialog open={open} onClose={onClose} title=\"Create new room\">\n      <RoomCreateForm onClose={onClose} onSubmit={onSubmit} initialValues={initialValues} />\n    </FormDialog>\n  );\n}\n\nexport const RoomCreate = React.memo(\n  RoomCreateC,\n  (prev, next) => equal(prev.initialValues, next.initialValues) && prev.open === next.open\n);\n","import { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { setDisplayName } from 'recompose';\nimport { UserIsAuthenticated } from '../../../utils/router.utils';\n\nexport const enhancedRoomList = compose(\n  // Set component display name (more clear in dev/error tools)\n  setDisplayName('EnhancedRoomList'),\n  // Add props.match\n  withRouter,\n  // Redirect to /login if user is not logged in\n  UserIsAuthenticated\n);\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > :not(:first-child)': {\n      marginLeft: 8\n    }\n  }\n};\nvar CardActions = React.forwardRef(function CardActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"disableSpacing\", \"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardActions.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardActions'\n})(CardActions);","import React, { useContext, useEffect } from 'react';\nimport { useFirestore } from 'react-redux-firebase';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport { firebaseSelectors } from '../store/firebase/firebase.selectors';\nimport { FirestoreCollection } from '../models/firebase.model';\nimport { IProfile, IRoom, IRoomCreateForm } from '../models/rooms.model';\nimport { locationSelectors } from '../store/location/location.selectors';\nimport { RoomCreate } from '../modules/RoomCreate/RoomCreate';\nimport { RouterPath } from '../models/paths';\nimport { SnackbarType, ToastContext } from '../contexts/Toast.context';\n\nexport function RoomCreateInRoomList() {\n  const { path: locationPath } = useSelector(locationSelectors.match);\n\n  const [open, setOpen] = React.useState(false);\n  const history = useHistory();\n  const firestore = useFirestore();\n  const userProfile: IProfile = useSelector(firebaseSelectors.userProfile);\n  const Toast = useContext(ToastContext);\n\n  const handleClose = () => {\n    setOpen(false);\n    history.push(RouterPath.ROOMS_PATH);\n  };\n\n  function createNewRoom(formValues: IRoomCreateForm): Promise<void> {\n    const newRoom: IRoom = {\n      createdAt: Date.now().toString(),\n      gameMasterUid: userProfile.uid,\n      logs: [],\n      playersUid: [],\n      players: {\n        [userProfile.uid]: {\n          uid: userProfile.uid,\n          avatarUrl: userProfile.avatarUrl || userProfile.photoURL,\n          displayName: userProfile.displayName,\n          email: userProfile.email,\n          photoURL: userProfile.photoURL || userProfile.avatarUrl,\n          gameMaster: true,\n        },\n      },\n      ...formValues,\n    };\n    return firestore\n      .collection(FirestoreCollection.ROOMS)\n      .add(newRoom)\n      .then(room => {\n        setOpen(false);\n        history.push(`${RouterPath.ROOM_PATH}/${room.id}`);\n      });\n  }\n\n  const handleSubmit = (formValues: IRoomCreateForm) => {\n    createNewRoom(formValues).catch((e: boolean) => {\n      Toast.setSnackbarConfig({\n        type: SnackbarType.ERROR,\n        open: true,\n        text: 'Upss.. there was an error creating the room',\n      });\n    });\n  };\n\n  useEffect(() => {\n    if (locationPath === RouterPath.ROOM_CREATE_PATH) {\n      setOpen(true);\n    }\n  }, [locationPath]);\n\n  return <RoomCreate open={open} onClose={handleClose} onSubmit={handleSubmit} />;\n}\n","import React from 'react';\nimport { Avatar, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\n\nimport { firstLettersJoined } from '../../../utils/text.utils';\nimport { dateUtils } from '../../../utils/date.utils';\nimport { IRoom } from '../../../models/rooms.model';\nimport { equal } from '../../../utils/object.utils';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    item: {\n      cursor: 'pointer',\n    },\n  });\n\ninterface RoomListElementProps extends WithStyles<typeof styles> {\n  roomId: string;\n  room: IRoom;\n  selectedRoom: string | null;\n  onRoomClick: (roomId: string) => void;\n}\n\nfunction RoomListElementC(props: RoomListElementProps) {\n  const { classes, room, roomId, onRoomClick, selectedRoom } = props;\n\n  return (\n    <ListItem\n      onClick={() => onRoomClick(roomId)}\n      selected={roomId === selectedRoom}\n      className={classes.item}\n      button\n      dense\n      alignItems=\"flex-start\"\n    >\n      <ListItemAvatar>\n        <Avatar>{firstLettersJoined(room.roomName || 'No name')}</Avatar>\n      </ListItemAvatar>\n      <ListItemText\n        primary={room.roomName || 'No name'}\n        secondary={dateUtils.timeStampToFormattedDate(room.createdAt)}\n      />\n    </ListItem>\n  );\n}\n\nexport const RoomListElement = React.memo(\n  withStyles(styles)(RoomListElementC),\n  (prev, next) => equal(prev.room, next.room) && prev.selectedRoom === next.selectedRoom\n);\n","import React from 'react';\nimport { Divider, Grow, List } from '@material-ui/core';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport { Dictionary } from 'react-redux-firebase';\n\nimport { IRoom } from '../../../models/rooms.model';\nimport { equal } from '../../../utils/object.utils';\nimport { RoomListElement } from './RoomListElement';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n      height: '20vh',\n      overflowY: 'scroll',\n    },\n    item: {\n      cursor: 'pointer',\n    },\n    divider: { backgroundColor: 'rgba(0, 0, 0, 0.12)' },\n  });\n\ninterface RoomListElementProps extends WithStyles<typeof styles> {\n  roomsAsGameMaster: Dictionary<IRoom>;\n  roomsAsPlayer: Dictionary<IRoom>;\n  selectedRoom: string | null;\n  onRoomClick: (roomId: string) => void;\n}\n\nfunction RoomListElementsC(props: RoomListElementProps) {\n  const { classes, roomsAsGameMaster, roomsAsPlayer, onRoomClick, selectedRoom } = props;\n\n  const renderElement = (rooms: Dictionary<IRoom>, timeout: number = 300) =>\n    Object.keys(rooms).map((roomId, id) => (\n      <Grow key={roomId} in timeout={1000 * id + timeout}>\n        <RoomListElement room={rooms[roomId]} selectedRoom={selectedRoom} roomId={roomId} onRoomClick={onRoomClick} />\n      </Grow>\n    ));\n\n  return (\n    <List className={classes.root}>\n      {renderElement(roomsAsGameMaster)}\n      <Grow in={!!Object.keys(roomsAsGameMaster).length} timeout={1000 * Object.keys(roomsAsGameMaster).length + 300}>\n        <Divider className={classes.divider} />\n      </Grow>\n      {renderElement(roomsAsPlayer, 1000 * Object.keys(roomsAsGameMaster).length + 300)}\n    </List>\n  );\n}\n\nexport const RoomListElements = React.memo(\n  withStyles(styles)(RoomListElementsC),\n  (prev, next) =>\n    equal(prev.roomsAsGameMaster, next.roomsAsGameMaster) &&\n    equal(prev.roomsAsPlayer, next.roomsAsPlayer) &&\n    prev.selectedRoom === next.selectedRoom\n);\n","import AppBar from '@material-ui/core/AppBar';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport React from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { Grow } from '@material-ui/core';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\nimport { Dictionary } from 'react-redux-firebase';\n\nimport { RouterPath } from '../../models/paths';\nimport { IRoom } from '../../models/rooms.model';\nimport { RoomListElements } from './components/RoomListElements';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      margin: 'auto',\n      overflow: 'hidden',\n    },\n    searchBar: {\n      borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n    },\n    searchInput: {\n      fontSize: theme.typography.fontSize,\n    },\n    block: {\n      display: 'block',\n    },\n    contentWrapper: {\n      margin: '16px 16px',\n    },\n  });\n\nexport interface RoomListProps extends WithStyles<typeof styles> {\n  showSearchBar?: boolean;\n  roomsAsGameMaster: Dictionary<IRoom>;\n  roomsAsPlayer: Dictionary<IRoom>;\n  selectedRoom: string | null;\n  label: string;\n}\n\nfunction RoomListC(props: RoomListProps) {\n  const { classes, roomsAsGameMaster, roomsAsPlayer, showSearchBar, selectedRoom, label } = props;\n  const history = useHistory();\n\n  const onRoomClick = (roomId: string) => {\n    return history.push(`${RouterPath.ROOM_PATH}/${roomId}`);\n  };\n\n  return (\n    <Grow in>\n      <Paper className={classes.paper}>\n        {showSearchBar && (\n          <AppBar className={classes.searchBar} position=\"static\" color=\"default\" elevation={0}>\n            <Toolbar>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item>\n                  <SearchIcon className={classes.block} color=\"inherit\" />\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    fullWidth\n                    placeholder={label}\n                    InputProps={{\n                      disableUnderline: true,\n                      className: classes.searchInput,\n                    }}\n                  />\n                </Grid>\n              </Grid>\n            </Toolbar>\n          </AppBar>\n        )}\n        <div className={classes.contentWrapper}>\n          <RoomListElements\n            roomsAsGameMaster={roomsAsGameMaster}\n            roomsAsPlayer={roomsAsPlayer}\n            onRoomClick={onRoomClick}\n            selectedRoom={selectedRoom}\n          />\n        </div>\n      </Paper>\n    </Grow>\n  );\n}\n\nexport const RoomList = withStyles(styles)(RoomListC);\n","import React, { useEffect } from 'react';\nimport { Button, Card, CardActions, CardContent, CardMedia, Grow, Typography } from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Dictionary } from 'react-redux-firebase';\nimport { firestoreSelectors } from '../../../store/firebase/firestore.selectors';\nimport { IRoom } from '../../../models/rooms.model';\nimport { locationActions } from '../../../store/location/location.actions';\nimport { LocationMatch } from '../../../store/location/location.model';\nimport { locationSelectors } from '../../../store/location/location.selectors';\nimport { RoomCreateInRoomList } from '../../../containers/RoomCreateInRoomList';\nimport { RoomList } from '../../../modules/RoomList/RoomList';\nimport { RouterPath } from '../../../models/paths';\n\nconst styles = (theme: Theme) => ({\n  cards: {\n    marginBottom: '16px',\n    maxWidth: 936,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nexport interface RoomListProps {\n  match: LocationMatch;\n}\n\nexport function RoomListsC(props: RoomListProps) {\n  const classes = useStyles();\n  const { match } = props;\n\n  const dispatch = useDispatch();\n  const storeLocationMatch = useSelector(locationSelectors.match);\n  const userRoomsAsGameMaster: Dictionary<IRoom> = useSelector(firestoreSelectors.userRoomsAsGameMaster) || {};\n  const userRoomsAsPlayer: Dictionary<IRoom> = useSelector(firestoreSelectors.userRoomsAsPlayer) || {};\n\n  useEffect(() => {\n    if (JSON.stringify(match) !== JSON.stringify(storeLocationMatch)) {\n      dispatch(locationActions.matchChange(match));\n    }\n  });\n\n  return (\n    <React.Fragment>\n      <section className={classes.cards}>\n        <Grow in>\n          <Card>\n            <CardMedia\n              className={classes.media}\n              image={`${process.env.PUBLIC_URL}/assets/images/fantasy-wallpapers.jpg`}\n              title=\"Fantasy RPG\"\n            />\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                Enter to the new world\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                Create a new game room to start a new adventure with your friends!\n              </Typography>\n            </CardContent>\n            <CardActions>\n              <NavLink to={RouterPath.ROOM_CREATE_PATH}>\n                <Button variant=\"contained\" color=\"primary\">\n                  Create new Room\n                </Button>\n              </NavLink>\n            </CardActions>\n          </Card>\n        </Grow>\n      </section>\n\n      <section className={classes.cards}>\n        <RoomList\n          roomsAsGameMaster={userRoomsAsGameMaster}\n          roomsAsPlayer={userRoomsAsPlayer}\n          selectedRoom={null}\n          showSearchBar\n          label={'Search room by name'}\n        />\n      </section>\n\n      <RoomCreateInRoomList />\n    </React.Fragment>\n  );\n}\n","import { enhancedRoomList } from './RoomListPage.enhancer';\nimport { RoomListsC } from './RoomListPage';\n\nexport default enhancedRoomList(RoomListsC);\n"],"sourceRoot":""}