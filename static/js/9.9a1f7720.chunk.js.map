{"version":3,"sources":["utils/router.utils.ts","modules/Chatter/index.ts","routes/ChatList/ChatListPage/ChatListPage.enhancer.tsx","routes/ChatList/ChatListPage/ChatListPage.tsx","routes/ChatList/ChatListPage/index.ts"],"names":["locationHelper","locationHelperBuilder","history","createBrowserHistory","UserIsAuthenticated","connectedRouterRedirect","redirectPath","RouterPath","HOME_PATH","AuthenticatingComponent","Loader","wrapperDisplayName","authenticatedSelector","firebaseSelectors","isAuthenticated","authenticatingSelector","redirectAction","newLoc","dispatch","push","type","payload","message","allowRedirectBack","state","firebase","auth","isEmpty","isInitializing","isLoaded","ownProps","getRedirectQueryParam","ROOMS_PATH","Chatter","React","lazy","enhancedChatListPage","compose","setDisplayName","withRouter","useStyles","makeStyles","theme","cards","marginBottom","props","match","useDispatch","storeLocationMatch","useSelector","locationSelectors","useEffect","JSON","stringify","locationActions","matchChange","classes","selectedChat","chatsSelectors","Fragment","Grow","in","className","ChatList"],"mappings":"kHAAA,kGASMA,EAAiBC,IAAsB,IACvCC,EAAUC,cAWHC,EAAsBC,kCAAwB,CACzDC,aAAcC,IAAWC,UACzBC,wBAAyBC,IACzBC,mBAAoB,sBAEpBC,sBAAuBC,IAAkBC,gBACzCC,uBAAwBF,IAAkBE,uBAC1CC,eAAiB,SAACC,GAAD,OAAiB,SAACC,GAEjChB,EAAQiB,KAAKF,GACbC,EAAS,CACPE,KAnBoB,oBAoBpBC,QAAS,CAAEC,QAAS,oCAaYjB,kCAAwB,CAC5DI,wBAAyBC,IACzBC,mBAAoB,yBACpBY,mBAAmB,EAEnBX,sBAAuB,SAACY,GAItB,OADIA,EADFC,SAAYC,KAEFC,SAEdZ,uBAAwB,oBAAGU,SAAYC,EAAf,EAAeA,KAAME,EAArB,EAAqBA,eAArB,OAA6CF,EAAKG,UAAYD,GACtFtB,aAAc,SAACkB,EAAOM,GAAR,OAAqB9B,EAAe+B,sBAAsBD,IAAavB,IAAWyB,YAChGhB,eAAiB,SAACC,GAAD,OAAiB,SAACC,GAEjChB,EAAQiB,KAAKF,GACbC,EAAS,CACPE,KAnDkB,kBAoDlBC,QAAS,CAAEC,QAAS,qC,iCChE1B,6CAEaW,EAFb,OAEuBC,EAAMC,MAAK,kBAAM,kC,8ECG3BC,EAAuBC,YAElCC,YAAe,oBAEfC,IAEAnC,K,uFCOIoC,EAAYC,aANH,SAACC,GAAD,MAAmB,CAChCC,MAAO,CACLC,aAAc,YCXHR,aDqBR,SAAuBS,GAAuB,IAC3CC,EAAUD,EAAVC,MACF5B,EAAW6B,wBACXC,EAAqBC,sBAAYC,IAAkBJ,OAEzDK,qBAAU,WACJC,KAAKC,UAAUP,KAAWM,KAAKC,UAAUL,IAC3C9B,EAASoC,IAAgBC,YAAYT,OAIzC,IAAMU,EAAUhB,IACViB,EAA8BR,sBAAYS,IAAeD,cAE/D,OACE,kBAAC,IAAME,SAAP,KACE,kBAACC,EAAA,EAAD,CAAMC,IAAI,GACR,6BAASC,UAAWN,EAAQb,OAC1B,kBAACoB,EAAA,EAAD,UAGDN,GACD,6BAASK,UAAWN,EAAQb,OAC1B,kBAACV,EAAA,EAAD","file":"static/js/9.9a1f7720.chunk.js","sourcesContent":["import locationHelperBuilder from 'redux-auth-wrapper/history4/locationHelper';\nimport { connectedRouterRedirect } from 'redux-auth-wrapper/history4/redirect';\nimport { createBrowserHistory } from 'history';\nimport { RouterPath } from '../models/paths';\n\nimport { AppState } from '../store/main';\nimport { firebaseSelectors } from '../store/firebase/firebase.selectors';\nimport { Loader } from '../components/Loader';\n\nconst locationHelper = locationHelperBuilder({});\nconst history = createBrowserHistory();\n\nconst AUTHED_REDIRECT = 'AUTHED_REDIRECT';\nconst UNAUTHED_REDIRECT = 'UNAUTHED_REDIRECT';\n\n/**\n * Higher Order Component that redirects to `/login` instead\n * rendering if user is not authenticated (default of redux-auth-wrapper).\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\nexport const UserIsAuthenticated = connectedRouterRedirect({\n  redirectPath: RouterPath.HOME_PATH,\n  AuthenticatingComponent: Loader,\n  wrapperDisplayName: 'UserIsAuthenticated',\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: firebaseSelectors.isAuthenticated,\n  authenticatingSelector: firebaseSelectors.authenticatingSelector,\n  redirectAction: ((newLoc: any) => (dispatch: any) => {\n    // Use push, replace, and go to navigate around.\n    history.push(newLoc);\n    dispatch({\n      type: UNAUTHED_REDIRECT,\n      payload: { message: 'User is not authenticated.' },\n    });\n  }) as any,\n});\n\n/**\n * Higher Order Component that redirects to listings page or most\n * recent route instead rendering if user is not authenticated. This is useful\n * routes that should not be displayed if a user is logged in, such as the\n * login route.\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\nexport const UserIsNotAuthenticated = connectedRouterRedirect({\n  AuthenticatingComponent: Loader,\n  wrapperDisplayName: 'UserIsNotAuthenticated',\n  allowRedirectBack: false,\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: (state: AppState) => {\n    const {\n      firebase: { auth },\n    } = state;\n    return auth.isEmpty;\n  },\n  authenticatingSelector: ({ firebase: { auth, isInitializing } }) => !auth.isLoaded || isInitializing,\n  redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || RouterPath.ROOMS_PATH,\n  redirectAction: ((newLoc: any) => (dispatch: any) => {\n    // Use push, replace, and go to navigate around.\n    history.push(newLoc);\n    dispatch({\n      type: AUTHED_REDIRECT,\n      payload: { message: 'User is not authenticated.' },\n    });\n  }) as any,\n});\n\n/*\n/!**\n * Render children based on route config objects\n * @param {Array} routes - Routes settings array\n * @param {Object} match - Routes settings array\n * @param {Object} parentProps - Props to pass to children from parent\n *!/\nexport function renderChildren(routes, match, parentProps) {\n  return routes.map(route => (\n    <Route\n      key={`${match.url}-${route.path}`}\n      path={`${match.url}/${route.path}`}\n      render={props => <route.component {...parentProps} {...props} />}\n    />\n  ));\n}*/\n","import React from 'react';\n\nexport const Chatter = React.lazy(() => import('./Chatter'));\n","import { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { setDisplayName } from 'recompose';\nimport { UserIsAuthenticated } from '../../../utils/router.utils';\n\nexport const enhancedChatListPage = compose(\n  // Set component display name (more clear in dev/error tools)\n  setDisplayName('EnhancedChatList'),\n  // Add props.match\n  withRouter,\n  // Redirect to /login if user is not logged in\n  UserIsAuthenticated\n);\n","import React, { useEffect } from 'react';\nimport { Grow } from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ChatList } from '../../../modules/ChatList/ChatList';\nimport { chatsSelectors } from '../../../store/chats/chats.selectors';\nimport { Chatter } from '../../../modules/Chatter';\nimport { locationActions } from '../../../store/location/location.actions';\nimport { LocationMatch } from '../../../store/location/location.model';\nimport { locationSelectors } from '../../../store/location/location.selectors';\n\nconst styles = (theme: Theme) => ({\n  cards: {\n    marginBottom: '16px',\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\ninterface ChatListProps {\n  match: LocationMatch;\n}\n\nexport function ChatListPageC(props: ChatListProps) {\n  const { match } = props;\n  const dispatch = useDispatch();\n  const storeLocationMatch = useSelector(locationSelectors.match);\n\n  useEffect(() => {\n    if (JSON.stringify(match) !== JSON.stringify(storeLocationMatch)) {\n      dispatch(locationActions.matchChange(match));\n    }\n  });\n\n  const classes = useStyles();\n  const selectedChat: string | null = useSelector(chatsSelectors.selectedChat);\n  \n  return (\n    <React.Fragment>\n      <Grow in={true}>\n        <section className={classes.cards}>\n          <ChatList />\n        </section>\n      </Grow>\n      {!!selectedChat && (\n        <section className={classes.cards}>\n          <Chatter />\n        </section>\n      )}\n    </React.Fragment>\n  );\n}\n","import { enhancedChatListPage } from './ChatListPage.enhancer';\nimport { ChatListPageC } from './ChatListPage';\n\nexport default enhancedChatListPage(ChatListPageC);\n"],"sourceRoot":""}