{"version":3,"sources":["utils/router.utils.ts","models/rooms.model.ts","models/dice.model.ts","components/FormComponents.tsx","routes/RoomList/RoomListPage/RoomListPage.enhancer.tsx","modules/RoomCreate/components/RoomCreateForm.tsx","modules/RoomCreate/RoomCreate.tsx","modules/RoomList/components/RoomListElements.tsx","modules/RoomList/RoomList.tsx","routes/RoomList/RoomListPage/RoomListPage.tsx","routes/RoomList/RoomListPage/index.ts"],"names":["locationHelper","locationHelperBuilder","history","createBrowserHistory","UserIsAuthenticated","connectedRouterRedirect","redirectPath","RouterPath","HOME_PATH","AuthenticatingComponent","Loader","wrapperDisplayName","authenticatedSelector","firebaseSelectors","authenticatingSelector","redirectAction","newLoc","dispatch","push","type","payload","message","allowRedirectBack","state","firebase","auth","isEmpty","isInitializing","isLoaded","ownProps","getRedirectQueryParam","ROOMS_PATH","Log","createRoomFormModel","roomName","name","label","fullWidth","diceType","options","Dice","D4","value","D6","D8","D10","D12","D20","D100","description","multiline","d4","d6","d8","d10","d12","d20","d100","useStyles","makeStyles","theme","formField","marginBottom","spacing","sliderFormField","width","marginLeft","FormFieldHelperText","touched","error","FormFieldText","React","memo","props","classes","component","input","meta","invalid","custom","variant","placeholder","helperText","className","FormFieldCheckboxGroup","children","htmlFor","native","inputProps","id","control","checked","onChange","inputValue","checkboxesFormControls","map","index","includes","key","event","arr","target","splice","indexOf","row","FormFieldSlider","valuetext","min","max","inputRest","labelPlacement","defaultValue","getAriaValueText","aria-labelledby","valueLabelDisplay","step","marks","e","enhancedRoomList","compose","setDisplayName","withRouter","RoomCreateForm","reduxForm","form","validate","values","errors","forEach","field","length","handleSubmit","pristine","submitting","handleClose","onSubmit","DialogContent","dividers","DialogActions","Button","color","disabled","onClick","RoomCreate","withStyles","createStyles","locationPath","useSelector","locationSelectors","match","path","useState","open","setOpen","useTheme","fullScreen","useMediaQuery","breakpoints","down","useHistory","firestore","useFirestore","userProfile","useEffect","ROOM_CREATE_PATH","Dialog","onClose","DialogTitle","formValues","newRoom","createdAt","Date","now","toString","gameMaster","uid","avatarUrl","photoURL","displayName","email","logs","players","collection","FirestoreCollection","ROOMS","add","then","room","ROOM_PATH","createNewRoom","console","log","RoomListElements","root","backgroundColor","palette","background","paper","height","overflowY","item","cursor","divider","roomsAsGameMaster","roomsAsPlayer","onRoomClick","selectedRoom","renderElement","rooms","timeout","Object","keys","roomId","Grow","in","ListItem","selected","button","dense","alignItems","ListItemAvatar","Avatar","firstLettersJoined","ListItemText","primary","secondary","timeStampToFormattedDate","List","Divider","RoomList","margin","overflow","searchBar","borderBottom","searchInput","fontSize","typography","block","display","contentWrapper","showSearchBar","Paper","AppBar","position","elevation","Toolbar","Grid","container","xs","TextField","InputProps","disableUnderline","cards","maxWidth","media","useDispatch","storeLocationMatch","userRoomsAsGameMaster","firestoreSelectors","userRoomsAsPlayer","JSON","stringify","locationActions","matchChange","Fragment","Card","CardMedia","image","process","title","CardContent","Typography","gutterBottom","CardActions","to"],"mappings":"kHAAA,kGASMA,EAAiBC,IAAsB,IACvCC,EAAUC,cAWHC,EAAsBC,kCAAwB,CACzDC,aAAcC,IAAWC,UACzBC,wBAAyBC,IACzBC,mBAAoB,sBAEpBC,sBAAuBC,IAAkBD,sBACzCE,uBAAwBD,IAAkBC,uBAC1CC,eAAiB,SAACC,GAAD,OAAiB,SAACC,GAEjCf,EAAQgB,KAAKF,GACbC,EAAS,CACPE,KAnBoB,oBAoBpBC,QAAS,CAAEC,QAAS,oCAaYhB,kCAAwB,CAC5DI,wBAAyBC,IACzBC,mBAAoB,yBACpBW,mBAAmB,EAEnBV,sBAAuB,SAACW,GAItB,OADIA,EADFC,SAAYC,KAEFC,SAEdZ,uBAAwB,oBAAGU,SAAYC,EAAf,EAAeA,KAAME,EAArB,EAAqBA,eAArB,OAA6CF,EAAKG,UAAYD,GACtFrB,aAAc,SAACiB,EAAOM,GAAR,OAAqB7B,EAAe8B,sBAAsBD,IAAatB,IAAWwB,YAChGhB,eAAiB,SAACC,GAAD,OAAiB,SAACC,GAEjCf,EAAQgB,KAAKF,GACbC,EAAS,CACPE,KAnDkB,kBAoDlBC,QAAS,CAAEC,QAAS,qC,iCChE1B,wEAEYW,EAFZ,U,SAEYA,K,uBAAAA,M,KAkCL,IAAMC,EAAsB,CACjCC,SAAU,CAAEC,KAAM,WAAYC,MAAO,mBAAoBC,WAAW,GACpEC,SAAU,CACRH,KAAM,WACNC,MAAO,eACPG,QAAS,CACP,CAAEH,MAAOI,IAAKC,GAAIC,MAAOF,IAAKC,IAC9B,CAAEL,MAAOI,IAAKG,GAAID,MAAOF,IAAKG,IAC9B,CAAEP,MAAOI,IAAKI,GAAIF,MAAOF,IAAKI,IAC9B,CAAER,MAAOI,IAAKK,IAAKH,MAAOF,IAAKK,KAC/B,CAAET,MAAOI,IAAKM,IAAKJ,MAAOF,IAAKM,KAC/B,CAAEV,MAAOI,IAAKO,IAAKL,MAAOF,IAAKO,KAC/B,CAAEX,MAAOI,IAAKQ,KAAMN,MAAOF,IAAKQ,QAGpCC,YAAa,CAAEd,KAAM,cAAeC,MAAO,mBAAoBc,WAAW,EAAMb,WAAW,GAC3Fc,GAAI,CAAEhB,KAAMK,IAAKC,GAAIL,MAAOI,IAAKC,IACjCW,GAAI,CAAEhB,MAAOI,IAAKG,GAAIR,KAAMK,IAAKG,IACjCU,GAAI,CAAEjB,MAAOI,IAAKI,GAAIT,KAAMK,IAAKI,IACjCU,IAAK,CAAElB,MAAOI,IAAKK,IAAKV,KAAMK,IAAKK,KACnCU,IAAK,CAAEnB,MAAOI,IAAKM,IAAKX,KAAMK,IAAKM,KACnCU,IAAK,CAAEpB,MAAOI,IAAKO,IAAKZ,KAAMK,IAAKO,KACnCU,KAAM,CAAErB,MAAOI,IAAKQ,KAAMb,KAAMK,IAAKQ,OAIrBR,IAAKC,GAAWD,IAAKC,GACrBD,IAAKG,GAAWH,IAAKG,GACrBH,IAAKI,GAAWJ,IAAKI,GACpBJ,IAAKK,IAAYL,IAAKK,IACtBL,IAAKM,IAAYN,IAAKM,IACtBN,IAAKO,IAAYP,IAAKO,IACrBP,IAAKQ,KAAaR,IAAKQ,M,iCCvDpC,IAAKR,EAAZ,kC,SAAYA,K,QAAAA,E,QAAAA,E,QAAAA,E,UAAAA,E,UAAAA,E,UAAAA,E,aAAAA,M,8RCmCNkB,EAAYC,aARH,SAACC,GAAD,MAAmB,CAChCC,UAAW,CAAEC,aAAcF,EAAMG,QAAQ,IACzCC,gBAAiB,CACfC,MAAO,OACPC,WAAY,OAUHC,EAAsB,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,MAC7C,OAAMD,GAAWC,EAGR,kBAAC,IAAD,KAAiBD,GAAWC,QAFnC,GAMSC,EAAgBC,IAAMC,MAAK,SAACC,GACvC,IAAMC,EAAUhB,IAchB,OAAO,kBAAC,IAAD,iBAAWe,EAAX,CAAkBE,UAZP,SAAC,GAAD,IAAGvC,EAAH,EAAGA,MAAOwC,EAAV,EAAUA,MAAV,IAAiBC,KAAQT,EAAzB,EAAyBA,QAASU,EAAlC,EAAkCA,QAAST,EAA3C,EAA2CA,MAAYU,EAAvD,+CAChB,kBAAC,IAAD,eACEC,QAAQ,WACR5C,MAAOA,EACP6C,YAAa7C,EACbiC,MAAOD,GAAWU,EAClBI,WAAYd,GAAWC,GACnBO,EACAG,KAIuCI,UAAWT,EAAQb,gBAwCvDuB,GArCkBb,IAAMC,MAAK,SAACC,GACzC,IAAMC,EAAUhB,IAuBhB,OAAO,kBAAC,IAAD,iBAAWe,EAAX,CAAkBtD,KAAK,WAAWwD,UArB3B,SAAC,GAA4F,IAA1FC,EAAyF,EAAzFA,MAAyF,KAAlFxC,MAAkF,EAA3EyC,MAAQT,EAAmE,EAAnEA,QAASC,EAA0D,EAA1DA,MAASgB,EAAiD,EAAjDA,SAAaN,EAAoC,mDACxG,OACE,kBAAC,IAAD,CAAaV,MAAOD,GAAWC,GAC7B,kBAAC,IAAD,CAAYiB,QAAQ,qBAApB,OACA,kBAAC,IAAD,eACEN,QAAQ,WACRO,QAAA,GACIX,EACAG,EAJN,CAKES,WAAY,CACVrD,KAAM,MACNsD,GAAI,uBAGLJ,GAEFlB,EAAoB,CAAEC,UAASC,YAKqBc,UAAWT,EAAQb,gBAG/CU,IAAMC,MAAK,SAACC,GAC3C,IAAMC,EAAUhB,IAMhB,OAAO,kBAAC,IAAD,iBAAWe,EAAX,CAAkBtD,KAAK,WAAWwD,UAJ3B,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOxC,EAAmC,EAAnCA,MACtB,OAAO,kBAAC,IAAD,CAAkBsD,QAAS,kBAAC,IAAD,CAAUC,UAAWf,EAAMlC,MAAOkD,SAAUhB,EAAMgB,WAAcxD,MAAOA,KAGhD+C,UAAWT,EAAQb,gBAG1CU,IAAMC,MAAK,SAACC,GAChD,IAAMC,EAAUhB,IAoChB,OAAO,kBAAC,IAAD,iBAAWe,EAAX,CAAkBtD,KAAK,WAAWwD,UAlC3B,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,KAAMtC,EAAgD,EAAhDA,QAASH,EAAuC,EAAvCA,MAC7BD,EAAmByC,EAAnBzC,KAAMyD,EAAahB,EAAbgB,SACNxB,EAAmBS,EAAnBT,QAASC,EAAUQ,EAAVR,MACXwB,EAAajB,EAAMlC,MAEnBoD,EAAyBvD,EAAQwD,KAAI,WAAwBC,GAAmB,IAAxC5D,EAAuC,EAAvCA,MAAOM,EAAgC,EAAhCA,MAU7CiD,EAAUE,EAAWI,SAASvD,GACpC,OACE,kBAAC,IAAD,CACEwD,IAAKF,EACLN,QAAS,kBAAC,IAAD,CAAUC,QAASA,EAASC,SAbpB,SAACO,GACpB,IAAMC,EAAG,YAAOP,GAMhB,OALIM,EAAME,OAAOV,QACfS,EAAIlF,KAAKwB,GAET0D,EAAIE,OAAOF,EAAIG,QAAQ7D,GAAQ,GAE1BkD,EAASQ,IAM+CjE,KAAI,UAAKA,EAAL,YAAa6D,EAAb,KAAuBtD,MAAOA,IAC/FN,MAAOA,OAKb,OACE,kBAAC,IAAD,CAAaiC,MAAOD,KAAaC,EAAOM,UAAU,YAChD,kBAAC,IAAD,CAAWA,UAAU,UAAUvC,GAC/B,kBAAC,IAAD,CAAWoE,KAAG,GAAEV,GACf3B,EAAoB,CAAEC,UAASC,YAKqBc,UAAWT,EAAQb,iBAGnE4C,EAAkBlC,IAAMC,MAAK,SAACC,GACzC,IAAMC,EAAUhB,IAEhB,SAASgD,EAAUhE,GACjB,MAAM,GAAN,OAAUA,GAoCZ,OAAO,kBAAC,IAAD,iBAAW+B,EAAX,CAAkBE,UAjCP,SAAC,GAOP,IAAD,IANTgC,WAMS,MANH,EAMG,MALTC,WAKS,MALH,GAKG,EAJTxE,EAIS,EAJTA,MAIS,IAHTwC,MAASlC,EAGA,EAHAA,MAAOkD,EAGP,EAHOA,SAAaiB,EAGpB,wCAFThC,KACGE,GACM,EAFDX,QAEC,EAFQU,QAER,EAFiBT,MAEjB,qDACT,OACE,kBAAC,IAAD,CACEc,UAAWT,EAAQV,gBACnB5B,MAAOA,EACP0E,eAAe,QACfpB,QACE,kBAAC,IAAD,eACEqB,aAAc,EACdC,iBAAkBN,EAClBO,kBAAgB,kBAChBC,kBAAkB,OAClBC,KAAM,EACNC,OAAK,EACLT,IAAKA,EACLC,IAAKA,EACLlE,MAAwB,kBAAVA,EAAqBA,EAAQ,EAC3CkD,SAAU,SAACyB,EAAU3E,GAAX,OAA6BkD,EAASlD,KAC5CmE,EACA9B,OAOiCI,UAAWT,EAAQb,iB,8EChMvDyD,EAAmBC,YAE9BC,YAAe,oBAEfC,IAEArH,K,mPC4CK,IAAMsH,EAAiBC,YAAU,CACtCC,KAAM,aACNC,SA9Ce,SAACC,GAChB,IAAMC,EAAc,GAWpB,MATA,CAAC9F,IAAoBC,SAASC,MAAM6F,SAAQ,SAAAC,GACrCH,EAAOG,KACVF,EAAOE,GAAS,eAIdH,EAAO7F,IAAoBK,SAASH,OAAS2F,EAAO7F,IAAoBK,SAASH,MAAM+F,SAC3FH,EAAO9F,IAAoBK,SAASH,MAAQ,4BAEvC4F,IAgCqBJ,EA7B9B,SAAyBlD,GAA6B,IAC5C0D,EAA6D1D,EAA7D0D,aAAcC,EAA+C3D,EAA/C2D,SAAUC,EAAqC5D,EAArC4D,WAAYC,EAAyB7D,EAAzB6D,YAAaxD,EAAYL,EAAZK,QAEzD,OACE,0BAAMyD,SAAUJ,GACd,kBAACK,EAAA,EAAD,CAAeC,UAAQ,GACrB,6BACE,kBAAC,IAAkBxG,IAAoBC,WAGzC,6BACE,kBAAC,IAAkBD,IAAoBgB,cAEzC,6BACE,kBAAC,IAA2BhB,IAAoBK,YAGpD,kBAACoG,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQxH,KAAK,SAASyH,MAAM,UAAUC,SAAU/D,GAAWsD,GAAYC,GAAvE,UAGA,kBAACM,EAAA,EAAD,CAAQxH,KAAK,SAAS2H,QAASR,EAAaM,MAAM,WAAlD,e,gCC8BD,IAAMG,EAAaC,aA/DX,SAACpF,GAAD,OAAkBqF,YAAa,MA+DpBD,EA3D1B,SAAqBvE,GAAyB,IAC9ByE,EAAiBC,sBAAYC,IAAkBC,OAArDC,KADmC,EAGnB/E,IAAMgF,UAAS,GAHI,mBAGpCC,EAHoC,KAG9BC,EAH8B,KAIrC7F,EAAQ8F,cACRC,EAAaC,YAAchG,EAAMiG,YAAYC,KAAK,OAClD5J,EAAU6J,cACVC,EAAYC,yBACZC,EAAwBf,sBAAYtI,IAAkBqJ,aAEtD5B,EAAc,WAClBmB,GAAQ,GACRvJ,EAAQgB,KAAKX,IAAWwB,aAuC1B,OANAoI,qBAAU,WACJjB,IAAiB3I,IAAW6J,kBAC9BX,GAAQ,KAET,CAACP,IAGF,kBAACmB,EAAA,EAAD,CAAQV,WAAYA,EAAYH,KAAMA,EAAMc,QAAShC,EAAarB,kBAAgB,2BAChF,kBAACsD,EAAA,EAAD,wBACA,kBAAC7C,EAAD,CAAgBY,YAAaA,EAAaC,SAhBzB,SAACiC,IAvBtB,SAAuBA,GACrB,IAAMC,EAAc,aAClBC,UAAWC,KAAKC,MAAMC,WACtBC,WAAY,CACVC,IAAKb,EAAYa,IACjBC,UAAWd,EAAYc,WAAad,EAAYe,SAChDC,YAAahB,EAAYgB,YACzBC,MAAOjB,EAAYiB,MACnBF,SAAWf,EAAYe,UAAYf,EAAYc,WAEjDI,KAAM,GACNC,QAAS,IACNb,GAEL,OAAOR,EACJsB,WAAWC,IAAoBC,OAC/BC,IAAIhB,GACJiB,MAAK,SAAAC,GACJlC,GAAQ,GACRvJ,EAAQgB,KAAR,UAAgBX,IAAWqL,UAA3B,YAAwCD,EAAKlG,SAKjDoG,CAAcrB,GAAd,OAAgC,SAACnD,GAE/ByE,QAAQC,IAAI,CAAE1E,gB,0ICOb,IAAM2E,GAAoBzH,IAAMC,KAAKwE,aAzD7B,SAACpF,GAAD,OACbqF,YAAa,CACXgD,KAAM,CACJhI,MAAO,OACPiI,gBAAiBtI,EAAMuI,QAAQC,WAAWC,MAC1CC,OAAQ,OACRC,UAAW,UAEbC,KAAM,CACJC,OAAQ,WAEVC,QAAS,CAAER,gBAAiB,2BA8CYlD,EApC5C,SAA0BvE,GAA8B,IAC9CC,EAAyED,EAAzEC,QAASiI,EAAgElI,EAAhEkI,kBAAmBC,EAA6CnI,EAA7CmI,cAAeC,EAA8BpI,EAA9BoI,YAAaC,EAAiBrI,EAAjBqI,aAE1DC,EAAgB,SAACC,GAAD,IAA2BC,EAA3B,uDAA6C,IAA7C,OACpBC,OAAOC,KAAKH,GAAOjH,KAAI,SAACqH,EAAQ3H,GAAT,OACrB,kBAAC4H,EAAA,EAAD,CAAMnH,IAAKkH,EAAQE,IAAA,EAAGL,QAAS,IAAOxH,EAAKwH,GACzC,kBAACM,EAAA,EAAD,CACEzE,QAAS,kBAAM+D,EAAYO,IAC3BI,SAAUJ,IAAWN,EACrB3H,UAAWT,EAAQ8H,KACnBiB,QAAM,EACNC,OAAK,EACLC,WAAW,cAEX,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KAASC,aAAmBd,EAAMI,GAAQlL,UAAY,aAExD,kBAAC6L,EAAA,EAAD,CACEC,QAAShB,EAAMI,GAAQlL,UAAY,UACnC+L,UAAWC,aAAyBlB,EAAMI,GAAQ1C,mBAM5D,OACE,kBAACyD,EAAA,EAAD,CAAMhJ,UAAWT,EAAQuH,MACtBc,EAAcJ,GACf,kBAACU,EAAA,EAAD,CAAMC,KAAMJ,OAAOC,KAAKR,GAAmBzE,OAAQ+E,QAAS,IAAOC,OAAOC,KAAKR,GAAmBzE,OAAS,KACzG,kBAACkG,GAAA,EAAD,CAASjJ,UAAWT,EAAQgI,WAE7BK,EAAcH,EAAe,IAAOM,OAAOC,KAAKR,GAAmBzE,OAAS,UC4B5E,IAAMmG,GAAWrF,aAzET,SAACpF,GAAD,OACbqF,YAAa,CACXoD,MAAO,CACLiC,OAAQ,OACRC,SAAU,UAEZC,UAAW,CACTC,aAAc,iCAEhBC,YAAa,CACXC,SAAU/K,EAAMgL,WAAWD,UAE7BE,MAAO,CACLC,QAAS,SAEXC,eAAgB,CACdT,OAAQ,iBAyDUtF,EA7CxB,SAAmBvE,GAAuB,IAChCC,EAAkFD,EAAlFC,QAASiI,EAAyElI,EAAzEkI,kBAAmBC,EAAsDnI,EAAtDmI,cAAeoC,EAAuCvK,EAAvCuK,cAAelC,EAAwBrI,EAAxBqI,aAAc1K,EAAUqC,EAAVrC,MAC1ElC,EAAU6J,cAMhB,OACE,kBAACsD,EAAA,EAAD,CAAMC,IAAA,GACJ,kBAAC2B,EAAA,EAAD,CAAO9J,UAAWT,EAAQ2H,OACvB2C,GACC,kBAACE,EAAA,EAAD,CAAQ/J,UAAWT,EAAQ8J,UAAWW,SAAS,SAASvG,MAAM,UAAUwG,UAAW,GACjF,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACxL,QAAS,EAAG4J,WAAW,UACrC,kBAAC2B,EAAA,EAAD,CAAM9C,MAAI,GACR,kBAAC,IAAD,CAAYrH,UAAWT,EAAQmK,MAAOjG,MAAM,aAE9C,kBAAC0G,EAAA,EAAD,CAAM9C,MAAI,EAACgD,IAAE,GACX,kBAACC,EAAA,EAAD,CACEpN,WAAS,EACT4C,YAAa7C,EACbsN,WAAY,CACVC,kBAAkB,EAClBxK,UAAWT,EAAQgK,mBAQjC,yBAAKvJ,UAAWT,EAAQqK,gBACtB,kBAAC/C,GAAD,CACEW,kBAAmBA,EACnBC,cAAeA,EACfC,YAhCU,SAACO,GACnB,OAAOlN,EAAQgB,KAAR,UAAgBX,IAAWqL,UAA3B,YAAwCwB,KAgCvCN,aAAcA,UCvDpBpJ,GAAYC,aAVH,SAACC,GAAD,MAAmB,CAChCgM,MAAO,CACL9L,aAAc,OACd+L,SAAU,KAEZC,MAAO,CACLxD,OAAQ,SCnBGhF,aD6BR,SAAoB7C,GACzB,IAAMC,EAAUhB,KACR2F,EAAU5E,EAAV4E,MAEFpI,EAAW8O,wBACXC,EAAqB7G,sBAAYC,IAAkBC,OACnD4G,EAA2C9G,sBAAY+G,IAAmBD,wBAA0B,GACpGE,EAAuChH,sBAAY+G,IAAmBC,oBAAsB,GAQlG,OANAhG,qBAAU,WACJiG,KAAKC,UAAUhH,KAAW+G,KAAKC,UAAUL,IAC3C/O,EAASqP,IAAgBC,YAAYlH,OAKvC,kBAAC,IAAMmH,SAAP,KACE,6BAASrL,UAAWT,EAAQkL,OAC1B,kBAACvC,EAAA,EAAD,CAAMC,IAAA,GACJ,kBAACmD,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWvL,UAAWT,EAAQoL,MAAOa,MAAK,UAAKC,eAAL,yCAAoEC,MAAM,gBACpH,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,cAAY,EAAChM,QAAQ,KAAKL,UAAU,MAAhD,0BAGA,kBAACoM,EAAA,EAAD,CAAY/L,QAAQ,QAAQ4D,MAAM,gBAAgBjE,UAAU,KAA5D,uEAIF,kBAACsM,EAAA,EAAD,KACE,kBAAC,IAAD,CAASC,GAAI3Q,IAAW6J,kBACtB,kBAACzB,EAAA,EAAD,CAAQ3D,QAAQ,YAAY4D,MAAM,WAAlC,wBASV,6BAASzD,UAAWT,EAAQkL,OAC1B,kBAACvB,GAAD,CACE1B,kBAAmBsD,EACnBrD,cAAeuD,EACfrD,aAAc,KACdkC,eAAa,EACb5M,MAAO,yBAIX,kBAAC2G,EAAD","file":"static/js/8.9461e87f.chunk.js","sourcesContent":["import locationHelperBuilder from 'redux-auth-wrapper/history4/locationHelper';\nimport { connectedRouterRedirect } from 'redux-auth-wrapper/history4/redirect';\nimport { createBrowserHistory } from 'history';\nimport { RouterPath } from '../models/paths';\n\nimport { AppState } from '../store/main';\nimport { firebaseSelectors } from '../store/firebase/firebase.selectors';\nimport { Loader } from '../components/Loader';\n\nconst locationHelper = locationHelperBuilder({});\nconst history = createBrowserHistory();\n\nconst AUTHED_REDIRECT = 'AUTHED_REDIRECT';\nconst UNAUTHED_REDIRECT = 'UNAUTHED_REDIRECT';\n\n/**\n * Higher Order Component that redirects to `/login` instead\n * rendering if user is not authenticated (default of redux-auth-wrapper).\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\nexport const UserIsAuthenticated = connectedRouterRedirect({\n  redirectPath: RouterPath.HOME_PATH,\n  AuthenticatingComponent: Loader,\n  wrapperDisplayName: 'UserIsAuthenticated',\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: firebaseSelectors.authenticatedSelector,\n  authenticatingSelector: firebaseSelectors.authenticatingSelector,\n  redirectAction: ((newLoc: any) => (dispatch: any) => {\n    // Use push, replace, and go to navigate around.\n    history.push(newLoc);\n    dispatch({\n      type: UNAUTHED_REDIRECT,\n      payload: { message: 'User is not authenticated.' },\n    });\n  }) as any,\n});\n\n/**\n * Higher Order Component that redirects to listings page or most\n * recent route instead rendering if user is not authenticated. This is useful\n * routes that should not be displayed if a user is logged in, such as the\n * login route.\n * @param {Component} componentToWrap - Component to wrap\n * @return {Component} wrappedComponent\n */\nexport const UserIsNotAuthenticated = connectedRouterRedirect({\n  AuthenticatingComponent: Loader,\n  wrapperDisplayName: 'UserIsNotAuthenticated',\n  allowRedirectBack: false,\n  // Want to redirect the user when they are done loading and authenticated\n  authenticatedSelector: (state: AppState) => {\n    const {\n      firebase: { auth },\n    } = state;\n    return auth.isEmpty;\n  },\n  authenticatingSelector: ({ firebase: { auth, isInitializing } }) => !auth.isLoaded || isInitializing,\n  redirectPath: (state, ownProps) => locationHelper.getRedirectQueryParam(ownProps) || RouterPath.ROOMS_PATH,\n  redirectAction: ((newLoc: any) => (dispatch: any) => {\n    // Use push, replace, and go to navigate around.\n    history.push(newLoc);\n    dispatch({\n      type: AUTHED_REDIRECT,\n      payload: { message: 'User is not authenticated.' },\n    });\n  }) as any,\n});\n\n/*\n/!**\n * Render children based on route config objects\n * @param {Array} routes - Routes settings array\n * @param {Object} match - Routes settings array\n * @param {Object} parentProps - Props to pass to children from parent\n *!/\nexport function renderChildren(routes, match, parentProps) {\n  return routes.map(route => (\n    <Route\n      key={`${match.url}-${route.path}`}\n      path={`${match.url}/${route.path}`}\n      render={props => <route.component {...parentProps} {...props} />}\n    />\n  ));\n}*/\n","import { Dice, IDiceThrowResult } from './dice.model';\n\nexport enum Log {\n  DICE_ROLL = 'DICE_ROLL',\n}\n\nexport interface IProfile {\n  uid: string;\n  avatarUrl?: string;\n  displayName: string;\n  email: string;\n  photoURL: string;\n  connected?: boolean;\n}\n\nexport interface IRoomLog {\n  timestamp: string;\n  type: Log;\n  authorUid: string;\n  payload: Omit<IDiceThrowResult, 'emit'>;\n}\n\nexport interface IRoom extends IRoomCreateForm {\n  createdAt: string;\n  gameMaster: IProfile;\n  players: string[];\n  logs: IRoomLog[];\n  chatUid?: string;\n}\n\nexport interface IRoomCreateForm {\n  roomName: string;\n  diceType: Dice[];\n  description: string;\n}\n\nexport const createRoomFormModel = {\n  roomName: { name: 'roomName', label: 'Name of the Room', fullWidth: true },\n  diceType: {\n    name: 'diceType',\n    label: 'Allowed dice',\n    options: [\n      { label: Dice.D4, value: Dice.D4 },\n      { label: Dice.D6, value: Dice.D6 },\n      { label: Dice.D8, value: Dice.D8 },\n      { label: Dice.D10, value: Dice.D10 },\n      { label: Dice.D12, value: Dice.D12 },\n      { label: Dice.D20, value: Dice.D20 },\n      { label: Dice.D100, value: Dice.D100 },\n    ],\n  },\n  description: { name: 'description', label: 'Room description', multiline: true, fullWidth: true },\n  d4: { name: Dice.D4, label: Dice.D4 },\n  d6: { label: Dice.D6, name: Dice.D6 },\n  d8: { label: Dice.D8, name: Dice.D8 },\n  d10: { label: Dice.D10, name: Dice.D10 },\n  d12: { label: Dice.D12, name: Dice.D12 },\n  d20: { label: Dice.D20, name: Dice.D20 },\n  d100: { label: Dice.D100, name: Dice.D100 },\n};\n\nexport const diceSetFormModel = {\n  diceD4: { name: Dice.D4, label: Dice.D4, defaultValue: 1 },\n  diceD6: { name: Dice.D6, label: Dice.D6, defaultValue: 1 },\n  diceD8: { name: Dice.D8, label: Dice.D8, defaultValue: 1 },\n  diceD10: { name: Dice.D10, label: Dice.D10, defaultValue: 1 },\n  diceD12: { name: Dice.D12, label: Dice.D12, defaultValue: 1 },\n  diceD20: { name: Dice.D20, label: Dice.D20, defaultValue: 1 },\n  diceD100: { name: Dice.D100, label: Dice.D100, defaultValue: 1 },\n};\n\nexport interface IDiceDashboardForm {\n  [key: string]: number;\n}\n","export interface IDiceBeforeThrow {\n  vectors: any;\n  notation: any;\n  throwRequestResult: number[];\n  emitResult: boolean;\n}\n\nexport interface IDiceThrowResult {\n  diceSet: string[];\n  result: number[];\n  emit: boolean;\n}\n\nexport enum Dice {\n  D4 = 'd4',\n  D6 = 'd6',\n  D8 = 'd8',\n  D10 = 'd10',\n  D12 = 'd12',\n  D20 = 'd20',\n  D100 = 'd100',\n}\n\ninterface IDiceVector {\n  set: Dice;\n  pos: {\n    x: number;\n    y: number;\n    z: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n    z: number;\n  };\n  angle: {\n    x: number;\n    y: number;\n    z: number;\n  };\n  axis: {\n    x: number;\n    y: number;\n    z: number;\n    a: number;\n  };\n}\n\nexport interface IDiceThrow {\n  diceSet: string[];\n  result: number[];\n}\n","import React from 'react';\nimport {\n  Checkbox,\n  FormControl,\n  FormControlLabel,\n  FormGroup,\n  FormHelperText,\n  FormLabel,\n  InputLabel,\n  Select,\n  Slider,\n  TextField,\n} from '@material-ui/core';\nimport { Field } from 'redux-form';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\n\n/*\n * Model\n */\ninterface FormFieldGenericProps<T = any> {\n  name: string;\n  label: string;\n  value?: T;\n  min?: number;\n  max?: number;\n  [key: string]: any;\n}\nexport interface IGroupOption {\n  label: string;\n  value: string | number;\n}\n\ninterface FormFieldWithOptionsProps extends FormFieldGenericProps {\n  options: IGroupOption[];\n}\n\n/*\n * Styles\n */\n\nconst styles = (theme: Theme) => ({\n  formField: { marginBottom: theme.spacing(2) },\n  sliderFormField: {\n    width: '100%',\n    marginLeft: 0,\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\n/*\n * Components\n */\n\nexport const FormFieldHelperText = ({ touched, error }: any) => {\n  if (!(touched && error)) {\n    return;\n  } else {\n    return <FormHelperText>{touched && error}</FormHelperText>;\n  }\n};\n\nexport const FormFieldText = React.memo((props: FormFieldGenericProps) => {\n  const classes = useStyles();\n\n  const formField = ({ label, input, meta: { touched, invalid, error }, ...custom }: any) => (\n    <TextField\n      variant=\"outlined\"\n      label={label}\n      placeholder={label}\n      error={touched && invalid}\n      helperText={touched && error}\n      {...input}\n      {...custom}\n    />\n  );\n\n  return <Field {...props} component={formField} className={classes.formField} />;\n});\n\nexport const FormFieldSelect = React.memo((props: FormFieldGenericProps) => {\n  const classes = useStyles();\n\n  const field = ({ input, label, meta: { touched, error }, children, ...custom }: FormFieldGenericProps) => {\n    return (\n      <FormControl error={touched && error}>\n        <InputLabel htmlFor=\"age-native-simple\">Age</InputLabel>\n        <Select\n          variant=\"outlined\"\n          native\n          {...input}\n          {...custom}\n          inputProps={{\n            name: 'age',\n            id: 'age-native-simple',\n          }}\n        >\n          {children}\n        </Select>\n        {FormFieldHelperText({ touched, error })}\n      </FormControl>\n    );\n  };\n\n  return <Field {...props} type=\"checkbox\" component={field} className={classes.formField} />;\n});\n\nexport const FormFieldCheckbox = React.memo((props: FormFieldGenericProps) => {\n  const classes = useStyles();\n\n  const field = ({ input, label }: FormFieldGenericProps) => {\n    return <FormControlLabel control={<Checkbox checked={!!input.value} onChange={input.onChange} />} label={label} />;\n  };\n\n  return <Field {...props} type=\"checkbox\" component={field} className={classes.formField} />;\n});\n\nexport const FormFieldCheckboxGroup = React.memo((props: FormFieldWithOptionsProps) => {\n  const classes = useStyles();\n\n  const field = ({ input, meta, options, label }: FormFieldWithOptionsProps) => {\n    const { name, onChange } = input;\n    const { touched, error } = meta;\n    const inputValue = input.value;\n\n    const checkboxesFormControls = options.map(({ label, value }: any, index: number) => {\n      const handleChange = (event: any) => {\n        const arr = [...inputValue];\n        if (event.target.checked) {\n          arr.push(value);\n        } else {\n          arr.splice(arr.indexOf(value), 1);\n        }\n        return onChange(arr);\n      };\n      const checked = inputValue.includes(value);\n      return (\n        <FormControlLabel\n          key={index}\n          control={<Checkbox checked={checked} onChange={handleChange} name={`${name}[${index}]`} value={value} />}\n          label={label}\n        />\n      );\n    });\n\n    return (\n      <FormControl error={touched && !!error} component=\"fieldset\">\n        <FormLabel component=\"legend\">{label}</FormLabel>\n        <FormGroup row>{checkboxesFormControls}</FormGroup>\n        {FormFieldHelperText({ touched, error })}\n      </FormControl>\n    );\n  };\n\n  return <Field {...props} type=\"checkbox\" component={field} className={classes.formField} />;\n});\n\nexport const FormFieldSlider = React.memo((props: FormFieldGenericProps) => {\n  const classes = useStyles();\n\n  function valuetext(value: number) {\n    return `${value}`;\n  }\n\n  const formField = ({\n    min = 0,\n    max = 16,\n    label,\n    input: { value, onChange, ...inputRest },\n    meta: { touched, invalid, error },\n    ...custom\n  }: any) => {\n    return (\n      <FormControlLabel\n        className={classes.sliderFormField}\n        label={label}\n        labelPlacement=\"start\"\n        control={\n          <Slider\n            defaultValue={0}\n            getAriaValueText={valuetext}\n            aria-labelledby=\"number-of-dices\"\n            valueLabelDisplay=\"auto\"\n            step={1}\n            marks\n            min={min}\n            max={max}\n            value={typeof value === 'number' ? value : 0}\n            onChange={(e: Event, value: number) => onChange(value)}\n            {...inputRest}\n            {...custom}\n          />\n        }\n      />\n    );\n  };\n\n  return <Field {...props} component={formField} className={classes.formField} />;\n});\n","import { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { setDisplayName } from 'recompose';\nimport { UserIsAuthenticated } from '../../../utils/router.utils';\n\nexport const enhancedRoomList = compose(\n  // Set component display name (more clear in dev/error tools)\n  setDisplayName('EnhancedRoomList'),\n  // Add props.match\n  withRouter,\n  // Redirect to /login if user is not logged in\n  UserIsAuthenticated\n);\n","import React from 'react';\nimport { Button, DialogActions, DialogContent } from '@material-ui/core';\nimport { InjectedFormProps, reduxForm } from 'redux-form';\n\nimport { createRoomFormModel } from '../../../models/rooms.model';\nimport { FormFieldCheckboxGroup, FormFieldText } from '../../../components/FormComponents';\n\ninterface RoomCreateFormProps extends InjectedFormProps {\n  handleClose: () => void;\n}\n\nconst validate = (values: any) => {\n  const errors: any = {};\n\n  [createRoomFormModel.roomName.name].forEach(field => {\n    if (!values[field]) {\n      errors[field] = 'Required';\n    }\n  });\n\n  if (!(values[createRoomFormModel.diceType.name] && values[createRoomFormModel.diceType.name].length)) {\n    errors[createRoomFormModel.diceType.name] = 'Select at least one dice';\n  }\n  return errors;\n};\n\nfunction RoomCreateFormC(props: RoomCreateFormProps) {\n  const { handleSubmit, pristine, submitting, handleClose, invalid } = props;\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <DialogContent dividers>\n        <div>\n          <FormFieldText {...createRoomFormModel.roomName} />\n        </div>\n\n        <div>\n          <FormFieldText {...createRoomFormModel.description} />\n        </div>\n        <div>\n          <FormFieldCheckboxGroup {...createRoomFormModel.diceType} />\n        </div>\n      </DialogContent>\n      <DialogActions>\n        <Button type=\"submit\" color=\"primary\" disabled={invalid || pristine || submitting}>\n          Submit\n        </Button>\n        <Button type=\"button\" onClick={handleClose} color=\"primary\">\n          Cancel\n        </Button>\n      </DialogActions>\n    </form>\n  );\n}\n\nexport const RoomCreateForm = reduxForm({\n  form: 'createRoom',\n  validate,\n})(RoomCreateFormC as any) as any;\n","import React, { useEffect } from 'react';\nimport { createStyles, Theme, useTheme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport { Dialog, DialogTitle, useMediaQuery } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nimport { locationSelectors } from '../../store/location/location.selectors';\nimport { RoomCreateForm } from './components/RoomCreateForm';\nimport { RouterPath } from '../../models/paths';\nimport { IProfile, IRoom, IRoomCreateForm } from '../../models/rooms.model';\nimport { useFirestore } from 'react-redux-firebase';\nimport { FirestoreCollection } from '../../models/firestore.model';\nimport { firebaseSelectors } from '../../store/firebase/firebase.selectors';\n\nconst styles = (theme: Theme) => createStyles({});\n\nexport interface RoomCreateProps extends WithStyles<typeof styles> {}\n\nfunction RoomCreateC(props: RoomCreateProps) {\n  const { path: locationPath } = useSelector(locationSelectors.match);\n\n  const [open, setOpen] = React.useState(false);\n  const theme = useTheme();\n  const fullScreen = useMediaQuery(theme.breakpoints.down('xs'));\n  const history = useHistory();\n  const firestore = useFirestore();\n  const userProfile: IProfile = useSelector(firebaseSelectors.userProfile);\n\n  const handleClose = () => {\n    setOpen(false);\n    history.push(RouterPath.ROOMS_PATH);\n  };\n\n  function createNewRoom(formValues: IRoomCreateForm): Promise<void> {\n    const newRoom: IRoom = {\n      createdAt: Date.now().toString(),\n      gameMaster: {\n        uid: userProfile.uid,\n        avatarUrl: userProfile.avatarUrl || userProfile.photoURL,\n        displayName: userProfile.displayName,\n        email: userProfile.email,\n        photoURL: (userProfile.photoURL || userProfile.avatarUrl) as string,\n      },\n      logs: [],\n      players: [],\n      ...formValues,\n    };\n    return firestore\n      .collection(FirestoreCollection.ROOMS)\n      .add(newRoom)\n      .then(room => {\n        setOpen(false);\n        history.push(`${RouterPath.ROOM_PATH}/${room.id}`);\n      });\n  }\n\n  const handleSubmit = (formValues: IRoomCreateForm) => {\n    createNewRoom(formValues).catch((e: boolean) => {\n      // TODO implement error message\n      console.log({ e });\n    });\n  };\n\n  useEffect(() => {\n    if (locationPath === RouterPath.ROOM_CREATE_PATH) {\n      setOpen(true);\n    }\n  }, [locationPath]);\n\n  return (\n    <Dialog fullScreen={fullScreen} open={open} onClose={handleClose} aria-labelledby=\"responsive-dialog-title\">\n      <DialogTitle>Create new Room</DialogTitle>\n      <RoomCreateForm handleClose={handleClose} onSubmit={handleSubmit} />\n    </Dialog>\n  );\n}\n\nexport const RoomCreate = withStyles(styles)(RoomCreateC);\n","import React from 'react';\nimport { Avatar, Divider, Grow, List, ListItem, ListItemAvatar, ListItemText } from '@material-ui/core';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport { Dictionary } from 'react-redux-firebase';\n\nimport { firstLettersJoined } from '../../../utils/text.utils';\nimport { timeStampToFormattedDate } from '../../../utils/date.utils';\nimport { IRoom } from '../../../models/rooms.model';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      backgroundColor: theme.palette.background.paper,\n      height: '20vh',\n      overflowY: 'scroll',\n    },\n    item: {\n      cursor: 'pointer',\n    },\n    divider: { backgroundColor: 'rgba(0, 0, 0, 0.12)' },\n  });\n\ninterface RoomListElementProps extends WithStyles<typeof styles> {\n  roomsAsGameMaster: Dictionary<IRoom>;\n  roomsAsPlayer: Dictionary<IRoom>;\n  selectedRoom: string | null;\n  onRoomClick: (roomId: string) => void;\n}\n\nfunction RoomListElementC(props: RoomListElementProps) {\n  const { classes, roomsAsGameMaster, roomsAsPlayer, onRoomClick, selectedRoom } = props;\n\n  const renderElement = (rooms: Dictionary<IRoom>, timeout: number = 300) =>\n    Object.keys(rooms).map((roomId, id) => (\n      <Grow key={roomId} in timeout={1000 * id + timeout}>\n        <ListItem\n          onClick={() => onRoomClick(roomId)}\n          selected={roomId === selectedRoom}\n          className={classes.item}\n          button\n          dense\n          alignItems=\"flex-start\"\n        >\n          <ListItemAvatar>\n            <Avatar>{firstLettersJoined(rooms[roomId].roomName || 'No name')}</Avatar>\n          </ListItemAvatar>\n          <ListItemText\n            primary={rooms[roomId].roomName || 'No name'}\n            secondary={timeStampToFormattedDate(rooms[roomId].createdAt)}\n          />\n        </ListItem>\n      </Grow>\n    ));\n\n  return (\n    <List className={classes.root}>\n      {renderElement(roomsAsGameMaster)}\n      <Grow in={!!Object.keys(roomsAsGameMaster).length} timeout={1000 * Object.keys(roomsAsGameMaster).length + 300}>\n        <Divider className={classes.divider} />\n      </Grow>\n      {renderElement(roomsAsPlayer, 1000 * Object.keys(roomsAsGameMaster).length + 300)}\n    </List>\n  );\n}\n\nexport const RoomListElements =  React.memo(withStyles(styles)(RoomListElementC));\n","import AppBar from '@material-ui/core/AppBar';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport React from 'react';\nimport SearchIcon from '@material-ui/icons/Search';\nimport TextField from '@material-ui/core/TextField';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { Grow } from '@material-ui/core';\nimport { createStyles, Theme, withStyles, WithStyles } from '@material-ui/core/styles';\nimport { useHistory } from 'react-router-dom';\nimport { Dictionary } from 'react-redux-firebase';\n\nimport { RouterPath } from '../../models/paths';\nimport { IRoom } from '../../models/rooms.model';\nimport { RoomListElements } from './components/RoomListElements';\n\nconst styles = (theme: Theme) =>\n  createStyles({\n    paper: {\n      margin: 'auto',\n      overflow: 'hidden',\n    },\n    searchBar: {\n      borderBottom: '1px solid rgba(0, 0, 0, 0.12)',\n    },\n    searchInput: {\n      fontSize: theme.typography.fontSize,\n    },\n    block: {\n      display: 'block',\n    },\n    contentWrapper: {\n      margin: '16px 16px',\n    },\n  });\n\nexport interface RoomListProps extends WithStyles<typeof styles> {\n  showSearchBar?: boolean;\n  roomsAsGameMaster: Dictionary<IRoom>;\n  roomsAsPlayer: Dictionary<IRoom>;\n  selectedRoom: string | null;\n  label: string;\n}\n\nfunction RoomListC(props: RoomListProps) {\n  const { classes, roomsAsGameMaster, roomsAsPlayer, showSearchBar, selectedRoom, label } = props;\n  const history = useHistory();\n\n  const onRoomClick = (roomId: string) => {\n    return history.push(`${RouterPath.ROOM_PATH}/${roomId}`);\n  };\n\n  return (\n    <Grow in>\n      <Paper className={classes.paper}>\n        {showSearchBar && (\n          <AppBar className={classes.searchBar} position=\"static\" color=\"default\" elevation={0}>\n            <Toolbar>\n              <Grid container spacing={2} alignItems=\"center\">\n                <Grid item>\n                  <SearchIcon className={classes.block} color=\"inherit\" />\n                </Grid>\n                <Grid item xs>\n                  <TextField\n                    fullWidth\n                    placeholder={label}\n                    InputProps={{\n                      disableUnderline: true,\n                      className: classes.searchInput,\n                    }}\n                  />\n                </Grid>\n              </Grid>\n            </Toolbar>\n          </AppBar>\n        )}\n        <div className={classes.contentWrapper}>\n          <RoomListElements\n            roomsAsGameMaster={roomsAsGameMaster}\n            roomsAsPlayer={roomsAsPlayer}\n            onRoomClick={onRoomClick}\n            selectedRoom={selectedRoom}\n          />\n        </div>\n      </Paper>\n    </Grow>\n  );\n}\n\nexport const RoomList = withStyles(styles)(RoomListC);\n","import React, { useEffect } from 'react';\nimport { Button, Card, CardActions, CardContent, CardMedia, Grow, Typography } from '@material-ui/core';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport { NavLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Dictionary } from 'react-redux-firebase';\nimport { firestoreSelectors } from '../../../store/firebase/firestore.selectors';\nimport { IRoom } from '../../../models/rooms.model';\nimport { locationActions } from '../../../store/location/location.actions';\nimport { LocationMatch } from '../../../store/location/location.model';\nimport { locationSelectors } from '../../../store/location/location.selectors';\nimport { RoomCreate } from '../../../modules/RoomCreate/RoomCreate';\nimport { RoomList } from '../../../modules/RoomList/RoomList';\nimport { RouterPath } from '../../../models/paths';\n\nconst styles = (theme: Theme) => ({\n  cards: {\n    marginBottom: '16px',\n    maxWidth: 936,\n  },\n  media: {\n    height: 140,\n  },\n});\n\nconst useStyles = makeStyles(styles);\n\nexport interface RoomListProps {\n  match: LocationMatch;\n}\n\nexport function RoomListsC(props: RoomListProps) {\n  const classes = useStyles();\n  const { match } = props;\n\n  const dispatch = useDispatch();\n  const storeLocationMatch = useSelector(locationSelectors.match);\n  const userRoomsAsGameMaster: Dictionary<IRoom> = useSelector(firestoreSelectors.userRoomsAsGameMaster) || {};\n  const userRoomsAsPlayer: Dictionary<IRoom> = useSelector(firestoreSelectors.userRoomsAsPlayer) || {};\n\n  useEffect(() => {\n    if (JSON.stringify(match) !== JSON.stringify(storeLocationMatch)) {\n      dispatch(locationActions.matchChange(match));\n    }\n  });\n\n  return (\n    <React.Fragment>\n      <section className={classes.cards}>\n        <Grow in>\n          <Card>\n            <CardMedia className={classes.media} image={`${process.env.PUBLIC_URL}/assets/images/fantasy-wallpapers.jpg`} title=\"Fantasy RPG\" />\n            <CardContent>\n              <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                Enter to the new world\n              </Typography>\n              <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                Create a new game room to start a new adventure with your friends!\n              </Typography>\n            </CardContent>\n            <CardActions>\n              <NavLink to={RouterPath.ROOM_CREATE_PATH}>\n                <Button variant=\"contained\" color=\"primary\">\n                  Create new Room\n                </Button>\n              </NavLink>\n            </CardActions>\n          </Card>\n        </Grow>\n      </section>\n\n      <section className={classes.cards}>\n        <RoomList\n          roomsAsGameMaster={userRoomsAsGameMaster}\n          roomsAsPlayer={userRoomsAsPlayer}\n          selectedRoom={null}\n          showSearchBar\n          label={'Search room by name'}\n        />\n      </section>\n\n      <RoomCreate />\n    </React.Fragment>\n  );\n}\n","import { enhancedRoomList } from './RoomListPage.enhancer';\nimport { RoomListsC } from './RoomListPage';\n\nexport default enhancedRoomList(RoomListsC);\n"],"sourceRoot":""}